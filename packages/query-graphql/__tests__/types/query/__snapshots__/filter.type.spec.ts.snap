// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`filter types DeleteFilterType should create the correct filter graphql schema 1`] = `
"type Query {
  test(input: TestDtoFilter!): Int!
}

input TestDtoFilter {
  and: [TestFilterDtoDeleteFilter!]
  or: [TestFilterDtoDeleteFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
}

input TestFilterDtoDeleteFilter {
  and: [TestFilterDtoDeleteFilter!]
  or: [TestFilterDtoDeleteFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input StringEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StringEnum
  neq: StringEnum
  gt: StringEnum
  gte: StringEnum
  lt: StringEnum
  lte: StringEnum
  like: StringEnum
  notLike: StringEnum
  iLike: StringEnum
  notILike: StringEnum
  in: [StringEnum!]
  notIn: [StringEnum!]
}

enum StringEnum {
  ONE_STR
  TWO_STR
  THREE_STR
  FOUR_STR
}

input NumberEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: NumberEnum
  neq: NumberEnum
  gt: NumberEnum
  gte: NumberEnum
  lt: NumberEnum
  lte: NumberEnum
  like: NumberEnum
  notLike: NumberEnum
  iLike: NumberEnum
  notILike: NumberEnum
  in: [NumberEnum!]
  notIn: [NumberEnum!]
}

enum NumberEnum {
  ONE
  TWO
  THREE
  FOUR
}

input TimestampFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Timestamp
  neq: Timestamp
  gt: Timestamp
  gte: Timestamp
  lt: Timestamp
  lte: Timestamp
  in: [Timestamp!]
  notIn: [Timestamp!]
  between: TimestampFieldComparisonBetween
  notBetween: TimestampFieldComparisonBetween
}

"""
\`Date\` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TimestampFieldComparisonBetween {
  lower: Timestamp!
  upper: Timestamp!
}"
`;

exports[`filter types FilterType allowedBooleanExpressions option no boolean expressions should only expose allowed comparisons 1`] = `
"type Query {
  test(input: TestComparisonDtoFilter!): Int!
}

input TestComparisonDtoFilter {
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}"
`;

exports[`filter types FilterType allowedBooleanExpressions option only and boolean expressions should only expose allowed comparisons 1`] = `
"type Query {
  test(input: TestComparisonDtoFilter!): Int!
}

input TestComparisonDtoFilter {
  and: [TestAllowedComparisonsFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input TestAllowedComparisonsFilter {
  and: [TestAllowedComparisonsFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}"
`;

exports[`filter types FilterType allowedBooleanExpressions option only or boolean expressions should only expose allowed comparisons 1`] = `
"type Query {
  test(input: TestComparisonDtoFilter!): Int!
}

input TestComparisonDtoFilter {
  or: [TestAllowedComparisonsFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input TestAllowedComparisonsFilter {
  or: [TestAllowedComparisonsFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}"
`;

exports[`filter types FilterType allowedComparisons option should only expose allowed comparisons 1`] = `
"type Query {
  test(input: TestComparisonDtoFilter!): Int!
}

input TestComparisonDtoFilter {
  and: [TestAllowedComparisonFilter!]
  or: [TestAllowedComparisonFilter!]
  id: NumberFieldComparison
  boolField: TestAllowedComparisonBoolFieldFilterComparison
  dateField: TestAllowedComparisonDateFieldFilterComparison
  floatField: TestAllowedComparisonFloatFieldFilterComparison
  intField: TestAllowedComparisonIntFieldFilterComparison
  numberField: TestAllowedComparisonNumberFieldFilterComparison
  stringField: TestAllowedComparisonStringFieldFilterComparison
}

input TestAllowedComparisonFilter {
  and: [TestAllowedComparisonFilter!]
  or: [TestAllowedComparisonFilter!]
  id: NumberFieldComparison
  boolField: TestAllowedComparisonBoolFieldFilterComparison
  dateField: TestAllowedComparisonDateFieldFilterComparison
  floatField: TestAllowedComparisonFloatFieldFilterComparison
  intField: TestAllowedComparisonIntFieldFilterComparison
  numberField: TestAllowedComparisonNumberFieldFilterComparison
  stringField: TestAllowedComparisonStringFieldFilterComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestAllowedComparisonBoolFieldFilterComparison {
  is: Boolean
}

input TestAllowedComparisonDateFieldFilterComparison {
  eq: DateTime
  neq: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input TestAllowedComparisonFloatFieldFilterComparison {
  gt: Float
  gte: Float
}

input TestAllowedComparisonIntFieldFilterComparison {
  lt: Int
  lte: Int
}

input TestAllowedComparisonNumberFieldFilterComparison {
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

input TestAllowedComparisonStringFieldFilterComparison {
  like: String
  notLike: String
}"
`;

exports[`filter types FilterType allowedComparisons option should only expose between/not between comparisons for allowed types 1`] = `
"type Query {
  test(input: TestBetweenComparisonDtoFilter!): Int!
}

input TestBetweenComparisonDtoFilter {
  and: [TestBetweenComparisonFilter!]
  or: [TestBetweenComparisonFilter!]
  id: NumberFieldComparison
  boolField: TestBetweenComparisonBoolFieldFilterComparison
  dateField: TestBetweenComparisonDateFieldFilterComparison
  floatField: TestBetweenComparisonFloatFieldFilterComparison
  intField: TestBetweenComparisonIntFieldFilterComparison
  numberField: TestBetweenComparisonNumberFieldFilterComparison
  stringField: TestBetweenComparisonStringFieldFilterComparison
}

input TestBetweenComparisonFilter {
  and: [TestBetweenComparisonFilter!]
  or: [TestBetweenComparisonFilter!]
  id: NumberFieldComparison
  boolField: TestBetweenComparisonBoolFieldFilterComparison
  dateField: TestBetweenComparisonDateFieldFilterComparison
  floatField: TestBetweenComparisonFloatFieldFilterComparison
  intField: TestBetweenComparisonIntFieldFilterComparison
  numberField: TestBetweenComparisonNumberFieldFilterComparison
  stringField: TestBetweenComparisonStringFieldFilterComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestBetweenComparisonBoolFieldFilterComparison {
  eq: Boolean
}

input TestBetweenComparisonDateFieldFilterComparison {
  between: TestBetweenComparisonDateFieldFilterComparisonBetween
  notBetween: TestBetweenComparisonDateFieldFilterComparisonBetween
}

input TestBetweenComparisonDateFieldFilterComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input TestBetweenComparisonFloatFieldFilterComparison {
  between: TestBetweenComparisonFloatFieldFilterComparisonBetween
  notBetween: TestBetweenComparisonFloatFieldFilterComparisonBetween
}

input TestBetweenComparisonFloatFieldFilterComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestBetweenComparisonIntFieldFilterComparison {
  between: TestBetweenComparisonIntFieldFilterComparisonBetween
  notBetween: TestBetweenComparisonIntFieldFilterComparisonBetween
}

input TestBetweenComparisonIntFieldFilterComparisonBetween {
  lower: Int!
  upper: Int!
}

input TestBetweenComparisonNumberFieldFilterComparison {
  between: TestBetweenComparisonNumberFieldFilterComparisonBetween
  notBetween: TestBetweenComparisonNumberFieldFilterComparisonBetween
}

input TestBetweenComparisonNumberFieldFilterComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestBetweenComparisonStringFieldFilterComparison {
  eq: String
}"
`;

exports[`filter types FilterType filterDepth option different filterDepth options shouldn't affect each other 1`] = `
"type Query {
  testA(input: TestFilterDepth_ShouldNotAffectDeepFilter!): Int!
  testB(input: TestFilterDepth_ShouldNotAffect_RelationAFilter!): Int!
}

input TestFilterDepth_ShouldNotAffectDeepFilter {
  and: [TestFilterDepth_ShouldNotAffectDeepFilter!]
  or: [TestFilterDepth_ShouldNotAffectDeepFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
  filterableRelation: TestFilterDepth_ShouldNotAffect_RelationADeepFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestFilterDepth_ShouldNotAffect_RelationADeepFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationADeepFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationADeepFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
  filterableRelation: TestRelationDtoDeepFilter
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TestRelationDtoDeepFilter {
  and: [TestRelationDtoDeepFilter!]
  or: [TestRelationDtoDeepFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}

input TestFilterDepth_ShouldNotAffect_RelationAFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationAFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationAFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
  filterableRelation: TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter
}

input TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}"
`;

exports[`filter types FilterType filterDepth option should generate a 0-level deep filter-type 1`] = `
"type Query {
  test(input: TestFilterDepth_0Filter!): Int!
}

input TestFilterDepth_0Filter {
  and: [TestFilterDepth_0Filter!]
  or: [TestFilterDepth_0Filter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}"
`;

exports[`filter types FilterType filterDepth option should generate a 1-level deep filter-type 1`] = `
"type Query {
  test(input: TestFilterDepth_1Filter!): Int!
}

input TestFilterDepth_1Filter {
  and: [TestFilterDepth_1Filter!]
  or: [TestFilterDepth_1Filter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
  filterableRelation: TestFilterDepth_1FilterTestFilterDepth_1_RelationAFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestFilterDepth_1FilterTestFilterDepth_1_RelationAFilter {
  and: [TestFilterDepth_1FilterTestFilterDepth_1_RelationAFilter!]
  or: [TestFilterDepth_1FilterTestFilterDepth_1_RelationAFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}"
`;

exports[`filter types FilterType filterDepth option should generate a 2-level deep filter-type 1`] = `
"type Query {
  test(input: TestFilterDepth_2Filter!): Int!
}

input TestFilterDepth_2Filter {
  and: [TestFilterDepth_2Filter!]
  or: [TestFilterDepth_2Filter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
  filterableRelation: TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilter {
  and: [TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilter!]
  or: [TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
  filterableRelation: TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilterTestRelationDtoFilter
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilterTestRelationDtoFilter {
  and: [TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilterTestRelationDtoFilter!]
  or: [TestFilterDepth_2FilterTestFilterDepth_2_RelationAFilterTestRelationDtoFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}"
`;

exports[`filter types FilterType filterDepth option should generate a infinite deep filter-type 1`] = `
"type Query {
  test(input: TestFilterDepth_InfiniteDeepFilter!): Int!
}

input TestFilterDepth_InfiniteDeepFilter {
  and: [TestFilterDepth_InfiniteDeepFilter!]
  or: [TestFilterDepth_InfiniteDeepFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
  filterableRelation: TestFilterDepth_Infinite_RelationADeepFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestFilterDepth_Infinite_RelationADeepFilter {
  and: [TestFilterDepth_Infinite_RelationADeepFilter!]
  or: [TestFilterDepth_Infinite_RelationADeepFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
  filterableRelation: TestRelationDtoDeepFilter
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TestRelationDtoDeepFilter {
  and: [TestRelationDtoDeepFilter!]
  or: [TestRelationDtoDeepFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}"
`;

exports[`filter types FilterType filterDepth option should generate filter types with suffix / 0-level depth 1`] = `
"type Query {
  testA(input: TestFilterDepth_ShouldNotAffectUpdateFilter!): Int!
  testB(input: TestFilterDepth_ShouldNotAffect_RelationAUpdateFilter!): Int!
}

input TestFilterDepth_ShouldNotAffectUpdateFilter {
  and: [TestFilterDepth_ShouldNotAffectUpdateFilter!]
  or: [TestFilterDepth_ShouldNotAffectUpdateFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestFilterDepth_ShouldNotAffect_RelationAUpdateFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationAUpdateFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationAUpdateFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}"
`;

exports[`filter types FilterType filterDepth option should return cached types 1`] = `
"type Query {
  testA(input: TestFilterDepth_ShouldNotAffectDeepFilter!): Int!
  testB(input: TestFilterDepth_ShouldNotAffect_RelationAFilter!): Int!
}

input TestFilterDepth_ShouldNotAffectDeepFilter {
  and: [TestFilterDepth_ShouldNotAffectDeepFilter!]
  or: [TestFilterDepth_ShouldNotAffectDeepFilter!]
  id: NumberFieldComparison
  numberField: NumberFieldComparison
  filterableRelation2: TestFilterDepth_ShouldNotAffect_RelationADeepFilter
  filterableRelation1: TestFilterDepth_ShouldNotAffect_RelationADeepFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TestFilterDepth_ShouldNotAffect_RelationADeepFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationADeepFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationADeepFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
  filterableRelation2: TestRelationDtoDeepFilter
  filterableRelation1: TestRelationDtoDeepFilter
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TestRelationDtoDeepFilter {
  and: [TestRelationDtoDeepFilter!]
  or: [TestRelationDtoDeepFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}

input TestFilterDepth_ShouldNotAffect_RelationAFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationAFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationAFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
  filterableRelation2: TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter
  filterableRelation1: TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter
}

input TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter {
  and: [TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter!]
  or: [TestFilterDepth_ShouldNotAffect_RelationAFilterTestRelationDtoFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}"
`;

exports[`filter types FilterType filterRequired option should only expose allowed comparisons 1`] = `
"type Query {
  test(input: TestComparisonDtoFilter!): Int!
}

input TestComparisonDtoFilter {
  and: [TestFilterRequiredComparisonFilter!]
  or: [TestFilterRequiredComparisonFilter!]
  id: NumberFieldComparison
  requiredField: BooleanFieldComparison!
  nonRequiredField: DateFieldComparison
  notSpecifiedField: NumberFieldComparison
}

input TestFilterRequiredComparisonFilter {
  and: [TestFilterRequiredComparisonFilter!]
  or: [TestFilterRequiredComparisonFilter!]
  id: NumberFieldComparison
  requiredField: BooleanFieldComparison!
  nonRequiredField: DateFieldComparison
  notSpecifiedField: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}"
`;

exports[`filter types FilterType should create the correct filter graphql schema 1`] = `
"type Query {
  test(input: TestDtoFilter!): Int!
}

input TestDtoFilter {
  and: [TestFilterDtoFilter!]
  or: [TestFilterDtoFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
  filterableRelation: TestFilterDtoFilterTestRelationDtoFilter
  filterableCursorConnection: TestFilterDtoFilterTestRelationDtoFilter
  filterableOffsetConnection: TestFilterDtoFilterTestRelationDtoFilter
  filterableUnPagedRelations: TestFilterDtoFilterTestRelationDtoFilter
}

input TestFilterDtoFilter {
  and: [TestFilterDtoFilter!]
  or: [TestFilterDtoFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
  filterableRelation: TestFilterDtoFilterTestRelationDtoFilter
  filterableCursorConnection: TestFilterDtoFilterTestRelationDtoFilter
  filterableOffsetConnection: TestFilterDtoFilterTestRelationDtoFilter
  filterableUnPagedRelations: TestFilterDtoFilterTestRelationDtoFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input StringEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StringEnum
  neq: StringEnum
  gt: StringEnum
  gte: StringEnum
  lt: StringEnum
  lte: StringEnum
  like: StringEnum
  notLike: StringEnum
  iLike: StringEnum
  notILike: StringEnum
  in: [StringEnum!]
  notIn: [StringEnum!]
}

enum StringEnum {
  ONE_STR
  TWO_STR
  THREE_STR
  FOUR_STR
}

input NumberEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: NumberEnum
  neq: NumberEnum
  gt: NumberEnum
  gte: NumberEnum
  lt: NumberEnum
  lte: NumberEnum
  like: NumberEnum
  notLike: NumberEnum
  iLike: NumberEnum
  notILike: NumberEnum
  in: [NumberEnum!]
  notIn: [NumberEnum!]
}

enum NumberEnum {
  ONE
  TWO
  THREE
  FOUR
}

input TimestampFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Timestamp
  neq: Timestamp
  gt: Timestamp
  gte: Timestamp
  lt: Timestamp
  lte: Timestamp
  in: [Timestamp!]
  notIn: [Timestamp!]
  between: TimestampFieldComparisonBetween
  notBetween: TimestampFieldComparisonBetween
}

"""
\`Date\` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TimestampFieldComparisonBetween {
  lower: Timestamp!
  upper: Timestamp!
}

input TestFilterDtoFilterTestRelationDtoFilter {
  and: [TestFilterDtoFilterTestRelationDtoFilter!]
  or: [TestFilterDtoFilterTestRelationDtoFilter!]
  id: NumberFieldComparison
  relationName: StringFieldComparison
  relationAge: NumberFieldComparison
}"
`;

exports[`filter types SubscriptionFilterType should create the correct filter graphql schema 1`] = `
"type Query {
  test(input: TestDtoFilter!): Int!
}

input TestDtoFilter {
  and: [TestFilterDtoSubscriptionFilter!]
  or: [TestFilterDtoSubscriptionFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
}

input TestFilterDtoSubscriptionFilter {
  and: [TestFilterDtoSubscriptionFilter!]
  or: [TestFilterDtoSubscriptionFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input StringEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StringEnum
  neq: StringEnum
  gt: StringEnum
  gte: StringEnum
  lt: StringEnum
  lte: StringEnum
  like: StringEnum
  notLike: StringEnum
  iLike: StringEnum
  notILike: StringEnum
  in: [StringEnum!]
  notIn: [StringEnum!]
}

enum StringEnum {
  ONE_STR
  TWO_STR
  THREE_STR
  FOUR_STR
}

input NumberEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: NumberEnum
  neq: NumberEnum
  gt: NumberEnum
  gte: NumberEnum
  lt: NumberEnum
  lte: NumberEnum
  like: NumberEnum
  notLike: NumberEnum
  iLike: NumberEnum
  notILike: NumberEnum
  in: [NumberEnum!]
  notIn: [NumberEnum!]
}

enum NumberEnum {
  ONE
  TWO
  THREE
  FOUR
}

input TimestampFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Timestamp
  neq: Timestamp
  gt: Timestamp
  gte: Timestamp
  lt: Timestamp
  lte: Timestamp
  in: [Timestamp!]
  notIn: [Timestamp!]
  between: TimestampFieldComparisonBetween
  notBetween: TimestampFieldComparisonBetween
}

"""
\`Date\` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TimestampFieldComparisonBetween {
  lower: Timestamp!
  upper: Timestamp!
}"
`;

exports[`filter types UpdateFilterType should create the correct filter graphql schema 1`] = `
"type Query {
  test(input: TestDtoFilter!): Int!
}

input TestDtoFilter {
  and: [TestFilterDtoUpdateFilter!]
  or: [TestFilterDtoUpdateFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
}

input TestFilterDtoUpdateFilter {
  and: [TestFilterDtoUpdateFilter!]
  or: [TestFilterDtoUpdateFilter!]
  id: NumberFieldComparison
  boolField: BooleanFieldComparison
  dateField: DateFieldComparison
  floatField: FloatFieldComparison
  intField: IntFieldComparison
  numberField: NumberFieldComparison
  stringField: StringFieldComparison
  stringEnumField: StringEnumFilterComparison
  numberEnumField: NumberEnumFilterComparison
  timestampField: TimestampFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input StringEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StringEnum
  neq: StringEnum
  gt: StringEnum
  gte: StringEnum
  lt: StringEnum
  lte: StringEnum
  like: StringEnum
  notLike: StringEnum
  iLike: StringEnum
  notILike: StringEnum
  in: [StringEnum!]
  notIn: [StringEnum!]
}

enum StringEnum {
  ONE_STR
  TWO_STR
  THREE_STR
  FOUR_STR
}

input NumberEnumFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: NumberEnum
  neq: NumberEnum
  gt: NumberEnum
  gte: NumberEnum
  lt: NumberEnum
  lte: NumberEnum
  like: NumberEnum
  notLike: NumberEnum
  iLike: NumberEnum
  notILike: NumberEnum
  in: [NumberEnum!]
  notIn: [NumberEnum!]
}

enum NumberEnum {
  ONE
  TWO
  THREE
  FOUR
}

input TimestampFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Timestamp
  neq: Timestamp
  gt: Timestamp
  gte: Timestamp
  lt: Timestamp
  lte: Timestamp
  in: [Timestamp!]
  notIn: [Timestamp!]
  between: TimestampFieldComparisonBetween
  notBetween: TimestampFieldComparisonBetween
}

"""
\`Date\` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TimestampFieldComparisonBetween {
  lower: Timestamp!
  upper: Timestamp!
}"
`;
