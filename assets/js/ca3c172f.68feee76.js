"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[6457],{1347:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var l=t(4848);function o(e){var n=e.children,t=e.hidden,o=e.className;return(0,l.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,o),hidden:t,children:n})}},3384:(e,n,t)=>{t.d(n,{A:()=>I});var i=t(6540),r=t(4164),l=t(5236),o=t(6347),s=t(8385),a=t(5793),d=t(7422),c=t(2152);function h(e){var n,t;return null!=(n=null==(t=i.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,i.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function u(e){var n=e.values,t=e.children;return(0,i.useMemo)((function(){var e=null!=n?n:function(e){return h(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,d.XI)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,l=(0,o.W6)(),s=function(e){var n=e.queryString,t=void 0!==n&&n,i=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=i?i:null}({queryString:t,groupId:r});return[(0,a.aZ)(s),(0,i.useCallback)((function(e){if(s){var n=new URLSearchParams(l.location.search);n.set(s,e),l.replace(Object.assign({},l.location,{search:n.toString()}))}}),[s,l])]}function g(e){var n,t,r,l,o=e.defaultValue,a=e.queryString,d=void 0!==a&&a,h=e.groupId,g=u(e),j=(0,i.useState)((function(){return function(e){var n,t=e.defaultValue,i=e.tabValues;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:i}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+i.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=i.find((function(e){return e.default})))?n:i[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:g})})),x=j[0],f=j[1],y=m({queryString:d,groupId:h}),b=y[0],T=y[1],I=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:h}.groupId),t=(0,c.Dv)(n),r=t[0],l=t[1],[r,(0,i.useCallback)((function(e){n&&l.set(e)}),[n,l])]),F=I[0],D=I[1],O=function(){var e=null!=b?b:F;return p({value:e,tabValues:g})?e:null}();return(0,s.A)((function(){O&&f(O)}),[O]),{selectedValue:x,selectValue:(0,i.useCallback)((function(e){if(!p({value:e,tabValues:g}))throw new Error("Can't select invalid tab value="+e);f(e),T(e),D(e)}),[T,D,g]),tabValues:g}}var j=t(195);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function y(e){var n=e.className,t=e.block,i=e.selectedValue,o=e.selectValue,s=e.tabValues,a=[],d=(0,l.a_)().blockElementScrollPositionUntilNextRender,c=function(e){var n=e.currentTarget,t=a.indexOf(n),r=s[t].value;r!==i&&(d(n),o(r))},h=function(e){var n,t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var i,r=a.indexOf(e.currentTarget)+1;t=null!=(i=a[r])?i:a[0];break;case"ArrowLeft":var l,o=a.indexOf(e.currentTarget)-1;t=null!=(l=a[o])?l:a[a.length-1]}null==(n=t)||n.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:s.map((function(e){var n=e.value,t=e.label,l=e.attributes;return(0,f.jsx)("li",Object.assign({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:function(e){return a.push(e)},onKeyDown:h,onClick:c},l,{className:(0,r.A)("tabs__item",x.tabItem,null==l?void 0:l.className,{"tabs__item--active":i===n}),children:null!=t?t:n}),n)}))})}function b(e){var n=e.lazy,t=e.children,l=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var s=o.find((function(e){return e.props.value===l}));return s?(0,i.cloneElement)(s,{className:(0,r.A)("margin-top--md",s.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==l})}))})}function T(e){var n=g(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,f.jsx)(y,Object.assign({},n,e)),(0,f.jsx)(b,Object.assign({},n,e))]})}function I(e){var n=(0,j.A)();return(0,f.jsx)(T,Object.assign({},e,{children:h(e.children)}),String(n))}},8944:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var i=t(4848),r=t(8453),l=t(3384),o=t(1347);const s={title:"DTOs"},a=void 0,d={id:"graphql/dtos",title:"DTOs",description:"The query-graphql package leverages most decorators from @nestjs/graphql and TypeGraphQL, with the exception of FilterableField.",source:"@site/docs/graphql/dtos.mdx",sourceDirName:"graphql",slug:"/graphql/dtos",permalink:"/nestjs-query/docs/graphql/dtos",draft:!1,unlisted:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/dtos.mdx",tags:[],version:"current",frontMatter:{title:"DTOs"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/nestjs-query/docs/graphql/getting-started"},next:{title:"Resolvers",permalink:"/nestjs-query/docs/graphql/resolvers"}},c={},h=[{value:"<code>@FilterableField</code>",id:"filterablefield",level:2},{value:"Options",id:"options",level:3},{value:"Example",id:"example",level:3},{value:"Example - allowedComparisons",id:"example---allowedcomparisons",level:3},{value:"Example - filterRequired",id:"example---filterrequired",level:3},{value:"Example - filterOnly",id:"example---filteronly",level:3},{value:"<code>@IDField</code>",id:"idfield",level:2},{value:"Example",id:"example-1",level:3},{value:"Example - Disable Filtering",id:"example---disable-filtering",level:3},{value:"<code>@QueryOptions</code>",id:"queryoptions",level:2},{value:"Setting a default Filter",id:"setting-a-default-filter",level:3},{value:"Result Page Size",id:"result-page-size",level:3},{value:"Limiting Results Size",id:"limiting-results-size",level:3},{value:"Paging Strategy",id:"paging-strategy",level:3},{value:"Paging with Total Count",id:"paging-with-total-count",level:3},{value:"Default Sort",id:"default-sort",level:3},{value:"Allowed Boolean Expressions",id:"allowed-boolean-expressions",level:3},{value:"Generated filter-type depth",id:"generated-filter-type-depth",level:3},{value:"<code>n</code>-levels deep",id:"n-levels-deep",level:4},{value:"infinite depth",id:"infinite-depth",level:4}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"query-graphql"})," package leverages most decorators from ",(0,i.jsx)(n.a,{href:"https://docs.nestjs.com/graphql/quick-start",children:(0,i.jsx)(n.code,{children:"@nestjs/graphql"})})," and ",(0,i.jsx)(n.a,{href:"https://typegraphql.com",children:"TypeGraphQL"}),", with the exception of ",(0,i.jsx)(n.code,{children:"FilterableField"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"filterablefield",children:(0,i.jsx)(n.code,{children:"@FilterableField"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"FilterableField"})," is very similar to the ",(0,i.jsx)(n.a,{href:"https://typegraphql.ml/docs/types-and-fields.html",children:(0,i.jsx)(n.code,{children:"Field"})})," from\nTypeGraphQL, however it allows you to specify the fields that should be filterable when querying."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you use the @nestjs/graphql ",(0,i.jsx)(n.code,{children:"Field"})," decorator it will not be exposed in the query type for the DTO."]})}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.p,{children:"In addition to the normal field options you can also specify the following options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowedComparisons"})," - An array of allowed comparisons. You can use this option to allow a subset of filter comparisons when querying through graphql.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This option is useful if the field is expensive to query on for certain operators, or your data source supports a limited set of comparisons."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filterRequired"})," - When set to ",(0,i.jsx)(n.code,{children:"true"})," the field will be required whenever a ",(0,i.jsx)(n.code,{children:"filter"})," is used. The ",(0,i.jsx)(n.code,{children:"filter"})," requirement applies to all ",(0,i.jsx)(n.code,{children:"read"}),", ",(0,i.jsx)(n.code,{children:"update"}),", and ",(0,i.jsx)(n.code,{children:"delete"})," endpoints that use a ",(0,i.jsx)(n.code,{children:"filter"}),".","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"filterRequired"})," option is useful when your entity has an index that requires a subset of fields to be used to provide certain level of query performance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NOTE"}),": When a field is a required in a filter the default ",(0,i.jsx)(n.code,{children:"filter"})," option is ignored."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filterOnly"}),"- When set to ",(0,i.jsx)(n.code,{children:"true"}),", the field will only appear as ",(0,i.jsx)(n.code,{children:"filter"})," but isn't included as field inside the ",(0,i.jsx)(n.code,{children:"ObjectType"}),".","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This option is useful if you want to filter on foreign keys without resolving the relation but you don't want to have the foreign key show up as field in your query type for the DTO. This might be especially useful for ",(0,i.jsx)(n.a,{href:"/nestjs-query/docs/graphql/federation#reference-decorator",children:"federated relations"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["In the following example we allow ",(0,i.jsx)(n.code,{children:"id"}),", ",(0,i.jsx)(n.code,{children:"title"}),", and ",(0,i.jsx)(n.code,{children:"completed"})," to be used in queries."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts"',children:"import { FilterableField, IDField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example---allowedcomparisons",children:"Example - allowedComparisons"}),"\n",(0,i.jsxs)(n.p,{children:["In the following example the ",(0,i.jsx)(n.code,{children:"allowedComparisons"})," option is demonstrated by restricting the comparisons that are allowed when filtering on certain fields."]}),"\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.code,{children:"id"})," field only ",(0,i.jsx)(n.code,{children:"eq"}),", ",(0,i.jsx)(n.code,{children:"neq"}),", ",(0,i.jsx)(n.code,{children:"in"}),", and ",(0,i.jsx)(n.code,{children:"notIn"})," comparisons will be exposed in the schema."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"title"})," field will only allow ",(0,i.jsx)(n.code,{children:"eq"}),", ",(0,i.jsx)(n.code,{children:"like"}),", and ",(0,i.jsx)(n.code,{children:"notLike"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {6,9}',children:"import { FilterableField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => ID, { allowedComparisons: ['eq', 'neq', 'in', 'notIn'] })\n  id!: string;\n\n  @FilterableField({ allowedComparisons: ['eq', 'like', 'notLike'] })\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example---filterrequired",children:"Example - filterRequired"}),"\n",(0,i.jsxs)(n.p,{children:["In the following example the ",(0,i.jsx)(n.code,{children:"filterRequired"})," option is applied to the ",(0,i.jsx)(n.code,{children:"completed"})," field, ensuring that all endpoints that use a filter will require a comparison on the ",(0,i.jsx)(n.code,{children:"completed"})," field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {12}',children:"import { FilterableField, IDField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ filterRequired: true })\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example---filteronly",children:"Example - filterOnly"}),"\n",(0,i.jsxs)(n.p,{children:["In the following example the ",(0,i.jsx)(n.code,{children:"filterOnly"})," option is applied to the ",(0,i.jsx)(n.code,{children:"assigneeId"})," field, which makes a query filterable\nby the id of an assigned user but won't return the ",(0,i.jsx)(n.code,{children:"assigneeId"})," as field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts"',children:"import { FilterableField, IDField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@Relation('assignee', () => UserDTO)\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField({ filterOnly: true })\n  assigneeId!: string;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"idfield",children:(0,i.jsx)(n.code,{children:"@IDField"})}),"\n",(0,i.jsxs)(n.p,{children:["By default ",(0,i.jsx)(n.code,{children:"nestjs-query"})," uses the default graphql ",(0,i.jsx)(n.code,{children:"ID"})," scalar, if you need to use a different ",(0,i.jsx)(n.code,{children:"graphql"})," ",(0,i.jsx)(n.code,{children:"scalar"})," type you can use ",(0,i.jsx)(n.code,{children:"@IDField"})," decorator. ",(0,i.jsx)(n.code,{children:"nestjs-query"})," will use that ",(0,i.jsx)(n.code,{children:"scalar"})," type passed to the ",(0,i.jsx)(n.code,{children:"@IDField"})," for all auto-generated\n",(0,i.jsx)(n.code,{children:"query"})," and ",(0,i.jsx)(n.code,{children:"mutation"})," endpoints that rely on an input for the ",(0,i.jsx)(n.code,{children:"id"})," (e.g. ",(0,i.jsx)(n.code,{children:"findById"}),", ",(0,i.jsx)(n.code,{children:"updateOne"}),", ",(0,i.jsx)(n.code,{children:"deleteOne"}),")."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@IDField"})," uses the same options as ",(0,i.jsx)(n.code,{children:"@FilterableField"}),"."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["You may have seen ",(0,i.jsx)(n.code,{children:"@IDField"})," in various examples throughout the docs, this is because we recommend using ",(0,i.jsx)(n.code,{children:"@IDField"}),"\nby default. In the future if you need to change the type later on it should be a trivial change to find all fields\nthat use the ",(0,i.jsx)(n.code,{children:"@IDField"})," decorator to update."]})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["If you are using ",(0,i.jsx)(n.code,{children:"query-typegoose"}),'there is a known "won\'t fix" bug with ',(0,i.jsx)(n.code,{children:"class-transformer"}),", where ObjectIds end up getting new values, instead of the hex value they should be. To remedy this, we have a special decorator called '@ObjectId`. So, DTO's should use this as follow:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { Field, GraphQLISODateTime, ID, ObjectType } from '@nestjs/graphql'\nimport { CursorConnection, FilterableField, KeySet, ObjectId, QueryOptions } from '@ptc-org/nestjs-query-graphql'\nimport mongoose from 'mongoose'\n\nimport { AuthGuard } from '../../auth.guard'\nimport { SubTaskDTO } from '../../sub-task/dto/sub-task.dto'\nimport { TagDTO } from '../../tag/dto/tag.dto'\n\n@ObjectType('TodoItem')\n@KeySet(['id'])\n@QueryOptions({ enableTotalCount: true })\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true }, guards: [AuthGuard] })\n@CursorConnection('tags', () => TagDTO, { guards: [AuthGuard], update: { enabled: true }, remove: { enabled: true } })\nexport class TodoItemDTO {\n  @ObjectId()\n  _id: mongoose.Types.ObjectId\n"})}),(0,i.jsx)(n.p,{children:"Notice the last two lines of code."})]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"A common use case is to obscure an auto-incremented primary key."}),"\n",(0,i.jsxs)(n.p,{children:["In this example we'll do a simple version of that by declaring a new ",(0,i.jsx)(n.code,{children:"ID"})," scalar that will ",(0,i.jsx)(n.code,{children:"base64"})," encode all ids."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="common/custom-id.scalar.ts" {11-12,16-17,21-25}',children:"import { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('CustomID')\nexport class CustomIDScalar implements CustomScalar<string, number> {\n  description = 'ID custom scalar type';\n\n  private idPrefix = 'id:';\n\n  parseValue(value: string): number {\n    // parse a `base64` encoded id from the client when provided as a variable\n    return parseInt(Buffer.from(value, 'base64').toString('utf8').replace(this.idPrefix, ''), 10);\n  }\n\n  serialize(value: number): string {\n    // serialize a number into the base64 representation\n    return Buffer.from(`${this.idPrefix}${value}`, 'utf8').toString('base64');\n  }\n\n  parseLiteral(ast: ValueNode): number | null {\n    // parse a `base64` encoded id from the client when hardcoded into the query\n    if (ast.kind === Kind.STRING) {\n      return this.parseValue(ast.value);\n    }\n    return null;\n  }\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now lets register our ",(0,i.jsx)(n.code,{children:"CustomID"})," scalar with ",(0,i.jsx)(n.code,{children:"nestjs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="common/common.module.ts"',children:"import { Module } from '@nestjs/common';\nimport { CustomIDScalar } from './custom-id.scalar';\n\n@Module({\n  providers: [CustomIDScalar],\n})\nexport class CommonModule {}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once your ",(0,i.jsx)(n.code,{children:"CustomIDScalar"})," is registered you can use it in your ",(0,i.jsx)(n.code,{children:"DTOS"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/dto/todo-item.dto.ts" {7}',children:"import { FilterableField, IDField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, GraphQLISODateTime } from '@nestjs/graphql';\nimport { CustomIDScalar } from '../../common/custom-id.scalar';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => CustomIDScalar)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime, { filterOnly: true })\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime, { filterOnly: true })\n  updated!: Date;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now all ",(0,i.jsx)(n.code,{children:"graphql"})," endpoints that need to use an ",(0,i.jsx)(n.code,{children:"id"})," to query or mutate a ",(0,i.jsx)(n.code,{children:"TodoItem"})," will use the ",(0,i.jsx)(n.code,{children:"CustomIDScalar"}),"\ntype for the input."]}),"\n",(0,i.jsx)(n.h3,{id:"example---disable-filtering",children:"Example - Disable Filtering"}),"\n",(0,i.jsxs)(n.p,{children:["If you want to disable filtering and sorting on the ",(0,i.jsx)(n.code,{children:"id"})," field you can use the ",(0,i.jsx)(n.code,{children:"disableFilter"})," option."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/dto/todo-item.dto.ts" {7}',children:"import { FilterableField, IDField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, GraphQLISODateTime } from '@nestjs/graphql';\nimport { CustomIDScalar } from '../../common/custom-id.scalar';\n\n@ObjectType('TodoItem')\nexport class TodoItemDTO {\n  @IDField(() => CustomIDScalar, { disableFilter: true })\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime, { filterOnly: true })\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime, { filterOnly: true })\n  updated!: Date;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"queryoptions",children:(0,i.jsx)(n.code,{children:"@QueryOptions"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@QueryOptions"})," decorator can be used to override any defaults for querying functionality such as sorting,\nfiltering, paging strategy, etc."]}),"\n",(0,i.jsx)(n.h3,{id:"setting-a-default-filter",children:"Setting a default Filter"}),"\n",(0,i.jsxs)(n.p,{children:["When querying the default ",(0,i.jsx)(n.code,{children:"filter"})," is empty. You can specify a default filter by using the ",(0,i.jsx)(n.code,{children:"QueryOptions"})," decorator on\nyour DTO option."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The default filter is only used when a filter is not provided in a query."})}),"\n",(0,i.jsxs)(n.p,{children:["In this example we specify the default filter to be ",(0,i.jsx)(n.code,{children:"completed IS TRUE"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ defaultFilter: { completed: { is: true } } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"result-page-size",children:"Result Page Size"}),"\n",(0,i.jsx)(n.p,{children:"By default all results will be limited to 10 records."}),"\n",(0,i.jsxs)(n.p,{children:["To override the default you can override the default page size by setting the ",(0,i.jsx)(n.code,{children:"defaultResultSize"})," option."]}),"\n",(0,i.jsxs)(n.p,{children:["In this example we specify the ",(0,i.jsx)(n.code,{children:"defaultResultSize"})," to 5 which means if a page size is not specified 5 results will be\nreturned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ defaultResultSize: 5 })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"limiting-results-size",children:"Limiting Results Size"}),"\n",(0,i.jsxs)(n.p,{children:["By default the max number records that can be returned is ",(0,i.jsx)(n.code,{children:"50"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To override the default you can override the following options specifying the ",(0,i.jsx)(n.code,{children:"maxResultSize"})," option."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You can disable ",(0,i.jsx)(n.code,{children:"maxResultSize"})," by setting the option to ",(0,i.jsx)(n.code,{children:"-1"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"In this example we specify limit the max number of records an end user can request to 20."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ maxResultsSize: 20 })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"paging-strategy",children:"Paging Strategy"}),"\n",(0,i.jsxs)(n.p,{children:["By default ",(0,i.jsx)(n.code,{children:"nestjs-query"})," uses a ",(0,i.jsx)(n.code,{children:"cursor"})," based paging strategy and returns a ",(0,i.jsx)(n.a,{href:"https://relay.dev/graphql/connections.htm",children:"connection"})," for all query many endpoints."]}),"\n",(0,i.jsxs)(n.p,{children:["For a more in-depth overview of paging check out the ",(0,i.jsx)(n.a,{href:"./queries/paging",children:"paging docs"})]}),"\n",(0,i.jsxs)(n.p,{children:["You can override the default ",(0,i.jsx)(n.code,{children:"pagingStrategy"})," to one of the following alternatives"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"OFFSET"})," - sets paging to allow ",(0,i.jsx)(n.code,{children:"limit"})," and ",(0,i.jsx)(n.code,{children:"offset"})," fields, and returns an ",(0,i.jsx)(n.code,{children:"OffsetConnection"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NONE"})," - turn off all paging and always return an ",(0,i.jsx)(n.code,{children:"ArrayConnection"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsx)(n.code,{children:"OFFSET"})," strategy your paging arguments for a many query will accept a ",(0,i.jsx)(n.code,{children:"limit"})," and/or ",(0,i.jsx)(n.code,{children:"offset"}),".\nThis will also change the return type from a ",(0,i.jsx)(n.code,{children:"CursorConnection"})," to an ",(0,i.jsx)(n.code,{children:"OffsetConnection"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions, PagingStrategies } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ pagingStrategy: PagingStrategies.OFFSET })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To disable paging entirely you can use the ",(0,i.jsx)(n.code,{children:"NONE"})," ",(0,i.jsx)(n.code,{children:"pagingStrategy"}),". When using ",(0,i.jsx)(n.code,{children:"NONE"})," an ",(0,i.jsx)(n.code,{children:"ArrayConnection"})," will be returned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions, PagingStrategies } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ pagingStrategy: PagingStrategies.NONE })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"paging-with-total-count",children:"Paging with Total Count"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This section ",(0,i.jsx)(n.strong,{children:"ONLY"})," applies to ",(0,i.jsx)(n.code,{children:"CURSOR"})," and ",(0,i.jsx)(n.code,{children:"OFFSET"})," connections."]})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Enabling ",(0,i.jsx)(n.code,{children:"totalCount"})," can be expensive. If your table is large the ",(0,i.jsx)(n.code,{children:"totalCount"})," query may be expensive, use with caution."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"totalCount"})," field is not eagerly fetched. It will only be executed if the field is queried from the client."]})}),"\n",(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsx)(n.code,{children:"CURSOR"})," (the default) or ",(0,i.jsx)(n.code,{children:"OFFSET"})," paging strategy you have the option to expose a ",(0,i.jsx)(n.code,{children:"totalCount"})," field to\nallow clients to fetch a total count of records in a connection."]}),"\n",(0,i.jsxs)(n.p,{children:["To enable the ",(0,i.jsx)(n.code,{children:"totalCount"})," field for connections set the ",(0,i.jsx)(n.code,{children:"enableTotalCount"})," option to ",(0,i.jsx)(n.code,{children:"true"})," using the\n",(0,i.jsx)(n.code,{children:"@QueryOptions"})," decorator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions, PagingStrategies } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ enableTotalCount: true })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When setting ",(0,i.jsx)(n.code,{children:"enableTotalCount"})," to ",(0,i.jsx)(n.code,{children:"true"})," you will be able to query for ",(0,i.jsx)(n.code,{children:"totalCount"})," on ",(0,i.jsx)(n.code,{children:"cursor"})," or offset connections"]}),"\n",(0,i.jsxs)(l.A,{defaultValue:"graphql",values:[{label:"GraphQL",value:"graphql"},{label:"Response",value:"response"}],children:[(0,i.jsx)(o.A,{value:"graphql",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  todoItems {\n    totalCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        title\n        description\n      }\n    }\n  }\n}\n\n"})})}),(0,i.jsx)(o.A,{value:"response",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "todoItems": {\n      "totalCount": 5,\n      "pageInfo": {\n        "hasNextPage": false,\n        "hasPreviousPage": false,\n        "startCursor": "YXJyYXljb25uZWN0aW9uOjA=",\n        "endCursor": "YXJyYXljb25uZWN0aW9uOjQ="\n      },\n      "edges": [\n        {\n          "node": {\n            "id": "1",\n            "title": "Create Nest App",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "2",\n            "title": "Create Entity",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "3",\n            "title": "Create Entity Service",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "4",\n            "title": "Add Todo Item Resolver",\n            "description": null\n          }\n        },\n        {\n          "node": {\n            "id": "5",\n            "title": "How to create item With Sub Tasks",\n            "description": null\n          }\n        }\n      ]\n    }\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"default-sort",children:"Default Sort"}),"\n",(0,i.jsxs)(n.p,{children:["When querying the default is based on the persistence layer. You can override the default by providing the ",(0,i.jsx)(n.code,{children:"defaultSort"})," option."]}),"\n",(0,i.jsxs)(n.p,{children:["In this example we specify the default sort to be by ",(0,i.jsx)(n.code,{children:"title"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions, PagingStrategies } from '@ptc-org/nestjs-query-graphql';\nimport { SortDirection } from '@ptc-org/nestjs-query-core';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ defaultSort: [{ field: 'title', direction: SortDirection.ASC }] })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["When we use the ",(0,i.jsx)(n.code,{children:"@Relation"})," decorator or other ",(0,i.jsx)(n.a,{href:"/nestjs-query/docs/graphql/relations",children:"relation decorators"})," you might want to define the default sorting criteria like this:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts"',children:"import { SortDirection } from '@ptc-org/nestjs-query-core';\n// ...\n@Relation('assignee', () => UserDTO, {\n  defaultSort: [{ field: 'id', direction: SortDirection.ASC }],\n})\n"})}),(0,i.jsxs)(n.p,{children:["Note that default value for ",(0,i.jsx)(n.code,{children:"defaultSort"})," is ",(0,i.jsx)(n.code,{children:"[]"}),", meaning if you do ",(0,i.jsx)(n.strong,{children:"not"})," specify it you will receive the results as determined by your underlying database, which is unreliable and calculated based on how your database engine works."]})]}),"\n",(0,i.jsx)(n.h3,{id:"allowed-boolean-expressions",children:"Allowed Boolean Expressions"}),"\n",(0,i.jsxs)(n.p,{children:["When filtering you can provide ",(0,i.jsx)(n.code,{children:"and"})," and ",(0,i.jsx)(n.code,{children:"or"})," expressions to provide advanced filtering. You can turn off either by\nusing the ",(0,i.jsx)(n.code,{children:"allowedBooleanExpressions"})," option."]}),"\n",(0,i.jsxs)(n.p,{children:["In this example we will only allow ",(0,i.jsx)(n.code,{children:"and"})," expressions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5}',children:"import { FilterableField, IDField, QueryOptions, PagingStrategies } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ allowedBooleanExpressions: ['and'] })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To turn off all boolean expressions you can set ",(0,i.jsx)(n.code,{children:"allowedBooleanExpressions"})," to an empty array. This is useful if you\nonly allow filtering on certain fields and you want to disable all complex filtering."]}),"\n",(0,i.jsxs)(n.p,{children:["In this example we will only allow ",(0,i.jsx)(n.code,{children:"eq"})," comparisons on the id field and disable all ",(0,i.jsx)(n.code,{children:"and"}),"/",(0,i.jsx)(n.code,{children:"or"})," boolean expressions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {5,7}',children:"import { FilterableField, IDField, QueryOptions, PagingStrategies } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\n@ObjectType('TodoItem')\n@QueryOptions({ allowedBooleanExpressions: ['and'] })\nexport class TodoItemDTO {\n  @IDField(() => ID, { allowedComparisons: ['eq'] })\n  id!: string;\n\n  @Field()\n  title!: string;\n\n  @Field()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"generated-filter-type-depth",children:"Generated filter-type depth"}),"\n",(0,i.jsxs)(n.p,{children:["When querying the default filter is one level deep. You can specify the generated filter-type depth by\nusing the ",(0,i.jsx)(n.code,{children:"filterDepth"})," option."]}),"\n",(0,i.jsxs)(n.h4,{id:"n-levels-deep",children:[(0,i.jsx)(n.code,{children:"n"}),"-levels deep"]}),"\n",(0,i.jsxs)(n.p,{children:["To generate a filter-type that is ",(0,i.jsx)(n.code,{children:"n"}),"-levels deep you can set the ",(0,i.jsx)(n.code,{children:"filterDepth"})," option to ",(0,i.jsx)(n.code,{children:"n"}),".\nEach level will be generated as a new input type with the name from the previous level as a prefix.\nIn the following example it would generate ",(0,i.jsx)(n.code,{children:"TodoItemFilter"}),", ",(0,i.jsx)(n.code,{children:"TodoItemFilterSubTaskFilter"})," and ",(0,i.jsx)(n.code,{children:"TodoItemFilterTagFilter"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {8,9}',children:"import { FilterableField, IDField, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\nimport { SubTaskDTO } from '../../sub-task/dto/sub-task.dto'\nimport { TagDTO } from '../../tag/dto/tag.dto'\n\n@ObjectType('TodoItem')\n// generate a filter-type that is 2 levels deep\n@QueryOptions({ filterDepth: 2 })\n@CursorConnection('subTasks', () => SubTaskDTO)\n@CursorConnection('tags', () => TagDTO)\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"infinite-depth",children:"infinite depth"}),"\n",(0,i.jsxs)(n.p,{children:["To generate a filter-type with infinite depth you can set the ",(0,i.jsx)(n.code,{children:"filterDepth"})," option to ",(0,i.jsx)(n.code,{children:"Number.POSITIVE_INFINITY"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This will generate flat filter-types for each related entity.\nIn the following example it would generate ",(0,i.jsx)(n.code,{children:"TodoItemDeepFilter"}),", ",(0,i.jsx)(n.code,{children:"SubTaskDeepFilter"})," and ",(0,i.jsx)(n.code,{children:"TagDeepFilter"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item.dto.ts" {8,9}',children:"import { FilterableField, IDField, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\n\nimport { SubTaskDTO } from '../../sub-task/dto/sub-task.dto'\nimport { TagDTO } from '../../tag/dto/tag.dto'\n\n@ObjectType('TodoItem')\n// generate a filter-type with infinite depth\n@QueryOptions({ filterDepth: Number.POSITIVE_INFINITY })\n@CursorConnection('subTasks', () => SubTaskDTO)\n@CursorConnection('tags', () => TagDTO)\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @Field(() => GraphQLISODateTime)\n  created!: Date;\n\n  @Field(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);