"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[6824],{1347:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var r=n(4164);const o={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){var t=e.children,n=e.hidden,a=e.className;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,a),hidden:n,children:t})}},3384:(e,t,n)=>{n.d(t,{A:()=>v});var r=n(6540),o=n(4164),i=n(5236),a=n(6347),s=n(8385),l=n(5793),d=n(7422),u=n(2152);function c(e){var t,n;return null!=(t=null==(n=r.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,r.isValidElement)(e)&&((t=e.props)&&"object"==typeof t&&"value"in t))return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}function h(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:function(e){return c(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}(n);return function(e){var t=(0,d.XI)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function p(e){var t=e.queryString,n=void 0!==t&&t,o=e.groupId,i=(0,a.W6)(),s=function(e){var t=e.queryString,n=void 0!==t&&t,r=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:n,groupId:o});return[(0,l.aZ)(s),(0,r.useCallback)((function(e){if(s){var t=new URLSearchParams(i.location.search);t.set(s,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[s,i])]}function x(e){var t,n,o,i,a=e.defaultValue,l=e.queryString,d=void 0!==l&&l,c=e.groupId,x=h(e),j=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var o=null!=(t=r.find((function(e){return e.default})))?t:r[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:a,tabValues:x})})),f=j[0],g=j[1],b=p({queryString:d,groupId:c}),y=b[0],T=b[1],v=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),n=(0,u.Dv)(t),o=n[0],i=n[1],[o,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),I=v[0],z=v[1],A=function(){var e=null!=y?y:I;return m({value:e,tabValues:x})?e:null}();return(0,s.A)((function(){A&&g(A)}),[A]),{selectedValue:f,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:x}))throw new Error("Can't select invalid tab value="+e);g(e),T(e),z(e)}),[T,z,x]),tabValues:x}}var j=n(195);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(4848);function b(e){var t=e.className,n=e.block,r=e.selectedValue,a=e.selectValue,s=e.tabValues,l=[],d=(0,i.a_)().blockElementScrollPositionUntilNextRender,u=function(e){var t=e.currentTarget,n=l.indexOf(t),o=s[n].value;o!==r&&(d(t),a(o))},c=function(e){var t,n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var r,o=l.indexOf(e.currentTarget)+1;n=null!=(r=l[o])?r:l[0];break;case"ArrowLeft":var i,a=l.indexOf(e.currentTarget)-1;n=null!=(i=l[a])?i:l[l.length-1]}null==(t=n)||t.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:s.map((function(e){var t=e.value,n=e.label,i=e.attributes;return(0,g.jsx)("li",Object.assign({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:function(e){return l.push(e)},onKeyDown:c,onClick:u},i,{className:(0,o.A)("tabs__item",f.tabItem,null==i?void 0:i.className,{"tabs__item--active":r===t}),children:null!=n?n:t}),t)}))})}function y(e){var t=e.lazy,n=e.children,i=e.selectedValue,a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var s=a.find((function(e){return e.props.value===i}));return s?(0,r.cloneElement)(s,{className:(0,o.A)("margin-top--md",s.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})}))})}function T(e){var t=x(e);return(0,g.jsxs)("div",{className:(0,o.A)("tabs-container",f.tabList),children:[(0,g.jsx)(b,Object.assign({},t,e)),(0,g.jsx)(y,Object.assign({},t,e))]})}function v(e){var t=(0,j.A)();return(0,g.jsx)(T,Object.assign({},e,{children:c(e.children)}),String(t))}},4559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(4848),o=n(8453);n(3384),n(1347);const i={title:"Authorization"},a=void 0,s={id:"graphql/authorization",title:"Authorization",description:"The following section assumes you are familiar with authentication in nestjs.",source:"@site/docs/graphql/authorization.mdx",sourceDirName:"graphql",slug:"/graphql/authorization",permalink:"/nestjs-query/docs/graphql/authorization",draft:!1,unlisted:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/authorization.mdx",tags:[],version:"current",frontMatter:{title:"Authorization"},sidebar:"docs",previous:{title:"Hooks",permalink:"/nestjs-query/docs/graphql/hooks"},next:{title:"Aggregations",permalink:"/nestjs-query/docs/graphql/aggregations"}},l={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"@Authorize Decorator",id:"authorize-decorator",level:2},{value:"Relation Filtering",id:"relation-filtering",level:3},{value:"Customizing Relation Authorization",id:"customizing-relation-authorization",level:3},{value:"Custom Authorizer",id:"custom-authorizer",level:3},{value:"Using Authorizers In Your Resolver",id:"using-authorizers-in-your-resolver",level:2},{value:"@InjectAuthorizer Decorator",id:"injectauthorizer-decorator",level:2},{value:"Authorize depending on operation",id:"authorize-depending-on-operation",level:2},{value:"Complete Example",id:"complete-example",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["The following section assumes you are familiar with ",(0,r.jsx)(t.a,{href:"https://docs.nestjs.com/techniques/authentication",children:"authentication in nestjs"}),"."]})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"nestjs-query"})," provides authorization helpers out of the box to reduce the amount of boilerplate typically required."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"nestjs-query"})," graphql package exposes decorators and options to allow the following"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Additional filtering for objects based on the graphql context."}),"\n",(0,r.jsx)(t.li,{children:"Filtering relations based on the graphql context."}),"\n",(0,r.jsx)(t.li,{children:"Low level authorization service support when your authorizer needs to use other services or additional information\nthat is not in the graphql context."}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["If you are looking to modify incoming requests based on the context, take a look at the ",(0,r.jsx)(t.a,{href:"/nestjs-query/docs/graphql/hooks",children:"hooks documentation"})]})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["Authorization is invoked as the last step before calling the ",(0,r.jsx)(t.code,{children:"QueryService"}),"."]})}),"\n",(0,r.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(t.p,{children:["All examples assume you have a guard that adds a ",(0,r.jsx)(t.code,{children:"user"})," to the req on the context."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type AuthenticatedUser = {\n  id: number;\n  username: string;\n};\n\ntype UserContext = {\n  req: {\n    user: AuthenticatedUser;\n  };\n};\n"})}),"\n",(0,r.jsxs)(t.p,{children:["For the sake of this example we'll use a ",(0,r.jsx)(t.code,{children:"JWTAuthGuard"})," described in ",(0,r.jsx)(t.a,{href:"https://docs.nestjs.com/techniques/authentication#implementing-passport-jwt",children:"implementing passport jwt"})," nestjs docs."]}),"\n",(0,r.jsxs)(t.p,{children:["To enable the guard on your resolver endpoints you use the ",(0,r.jsx)(t.code,{children:"guards"})," option when setting up your resolver."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"guards"})," option will ensure that all queries and mutations will have the ",(0,r.jsx)(t.code,{children:"guard"})," added so the user is added to\nthe request."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.module.ts" {19}',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemInputDTO } from './dto/todo-item-input.dto';\nimport { TodoItemUpdateDTO } from './dto/todo-item-update.dto';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [\n        {\n          DTOClass: TodoItemDTO,\n          CreateDTOClass: TodoItemInputDTO,\n          UpdateDTOClass: TodoItemUpdateDTO,\n          guards: [JwtAuthGuard],\n        },\n      ],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"authorize-decorator",children:"@Authorize Decorator"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"@ptc-org/nestjs-query-graphql"})," package includes an ",(0,r.jsx)(t.code,{children:"@Authorize"})," decorator that allows you to add additional filter\ncriteria to authorize an incoming request."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"@Authorize"})," decorator accepts the following types."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["An ",(0,r.jsx)(t.code,{children:"object"})," that has an ",(0,r.jsx)(t.code,{children:"authorize"})," method that returns a Filter for the DTO."]}),"\n",(0,r.jsxs)(t.li,{children:["An instance of an ",(0,r.jsx)(t.code,{children:"Authorizer"})," that implements the ",(0,r.jsx)(t.code,{children:"authorize"})," and ",(0,r.jsx)(t.code,{children:"authorizeRelation"})," methods."]}),"\n",(0,r.jsxs)(t.li,{children:["An ",(0,r.jsx)(t.code,{children:"Authorizer"})," class reference that implements the ",(0,r.jsx)(t.code,{children:"Authorizer"})," interface. The ",(0,r.jsx)(t.code,{children:"Authorizer"})," class will be\ninstantiated using the ",(0,r.jsx)(t.code,{children:"nestjs"}),"'s dependency injection."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"@Authorize"})," decorator does not return an unauthorized error instead the following will occur:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"queryMany"})," results will not include any DTOs that do not match the filter criteria."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"findOne"})," will return a not found for a DTO that cannot be found for the ",(0,r.jsx)(t.code,{children:"id"})," and auth filter."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"updateOne"})," will return a not found error if the DTO to update cannot be found for the ",(0,r.jsx)(t.code,{children:"id"})," and auth filter."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"updateMany"})," will exclude any records that do not match the user provided filter and the auth filter from being\nupdated."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"deleteOne"})," will return a not found error if the DTO to delete cannot be found for the ",(0,r.jsx)(t.code,{children:"id"})," and auth filter."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"deleteMany"})," will exclude any records that do not match the user provided filter and the auth filter from being\ndeleted."]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["You can throw an ",(0,r.jsx)(t.code,{children:"UnauthorizedException"})," or return a rejected promise with an ",(0,r.jsx)(t.code,{children:"UnauthorizedException"})," in your\nauthorize function, if you can determine at that point that the user should not be able to access the endpoint."]})}),"\n",(0,r.jsxs)(t.p,{children:["In the following example the ",(0,r.jsx)(t.code,{children:"authorize"})," function returns a ",(0,r.jsx)(t.code,{children:"Filter"})," that includes the ",(0,r.jsx)(t.code,{children:"ownerId"})," to ensure that only\n",(0,r.jsx)(t.code,{children:"TodoItems"})," that belong to the authenticated user are returned."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/dto/todo-item.dto.ts" {15}',children:"import {\n  FilterableField,\n  IDField,\n  FilterableConnection,\n  FilterableRelation,\n  Authorize\n} from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../../sub-task/dto/sub-task.dto';\nimport { TagDTO } from '../../tag/dto/tag.dto';\nimport { UserDTO } from '../../user/user.dto';\nimport { UserContext } from '../../auth/auth.interfaces';\n\n@ObjectType('TodoItem')\n@Authorize({ authorize: (context: UserContext) => ({ ownerId: { eq: context.req.user.id } }) })\n@FilterableRelation('owner', () => UserDTO)\n@FilterableConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n@FilterableConnection('tags', () => TagDTO)\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: number;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @Field()\n  age!: number;\n\n  @FilterableField()\n  priority!: number;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n\n  @FilterableField()\n  ownerId!: number;\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"The above example is pretty straight forward, however your authorize function can be as complex as you need it to be\nbased on information in the context."})}),"\n",(0,r.jsx)(t.h3,{id:"relation-filtering",children:"Relation Filtering"}),"\n",(0,r.jsxs)(t.p,{children:["By default when relations are queried any additional filters defined using the ",(0,r.jsx)(t.code,{children:"@Authorize"})," decorator on the relation\nDTO will also be included."]}),"\n",(0,r.jsx)(t.p,{children:"When mutating relations"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["If the DTO that is having a relation(s) added or removed cannot be found for the ",(0,r.jsx)(t.code,{children:"id"})," and\nauth filter a not found error will be returned."]}),"\n",(0,r.jsxs)(t.li,{children:["When adding or removing a single relation if the relation cannot be found for the ",(0,r.jsx)(t.code,{children:"id"})," and auth filter a not found\nerror will be returned."]}),"\n",(0,r.jsx)(t.li,{children:"When adding or removing multiple relations if all relations cannot be found a not found error will be throw."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["For example given the following ",(0,r.jsx)(t.code,{children:"SubTaskDTO"})," definition whenever the ",(0,r.jsx)(t.code,{children:"subTasks"})," connection is queried through a\n",(0,r.jsx)(t.code,{children:"todoItem"}),", only ",(0,r.jsx)(t.code,{children:"subTasks"})," that belong to the user will be returned."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="sub-task/dto/sub-task.dto.ts"',children:"import { FilterableField, IDField, FilterableRelation, Authorize } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../../todo-item/dto/todo-item.dto';\nimport { UserContext } from '../../auth/auth.interfaces';\n\n@ObjectType('SubTask')\n@Authorize({ authorize: (context: UserContext) => ({ ownerId: { eq: context.req.user.id } }) })\n@FilterableRelation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\nexport class SubTaskDTO {\n  @IDField(() => ID)\n  id!: number;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField()\n  todoItemId!: string;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"customizing-relation-authorization",children:"Customizing Relation Authorization"}),"\n",(0,r.jsxs)(t.p,{children:["If you run into a case where you need to handle authorization for a relation differently from the ",(0,r.jsx)(t.code,{children:"@Authorize"}),"\ndecorator on the relation DTO you can specify the ",(0,r.jsx)(t.code,{children:"auth"})," option in your relation/connection decorator."]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"auth"})," option will take precedence over the ",(0,r.jsx)(t.code,{children:"@Authorize"})," decorator on the relation DTO."]})}),"\n",(0,r.jsxs)(t.p,{children:["For example you could define the subtasks with the ",(0,r.jsx)(t.code,{children:"auth"})," option, only allowing completed subtasks to be returned."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"@FilterableConnection('subTasks', () => SubTaskDTO, {\n  update: { enabled: true },\n  auth: {\n    authorize: (context: UserContext) => ({ ownerId: { eq: context.req.user.id }, completed: { is: true }}),\n  },\n})\n"})}),"\n",(0,r.jsx)(t.h3,{id:"custom-authorizer",children:"Custom Authorizer"}),"\n",(0,r.jsxs)(t.p,{children:["When you need more control over authorization you can create a ",(0,r.jsx)(t.code,{children:"CustomAuthorizer"}),". You may want to use a\n",(0,r.jsx)(t.code,{children:"CustomAuthorizer"})," if you need to use additional services to do authorization for a DTO."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"CustomAuthorizer"})," interface ensures two methods:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"authorize"})," - Should return a filter that should be used for all queries and mutations for the DTO."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"authorizeRelation"})," - Optionally modify the filter for the relation that will be used when querying the relation or\nadding/removing relations to/from the DTO. If undefined is returned, the authorization filter of the relation DTO\nwill be used instead."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["In this example we'll create a simple authorizer for ",(0,r.jsx)(t.code,{children:"SubTasks"}),". You can use this as a base to create a more complex\nauthorizers that depends on other services."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:"title='sub-task/sub-task.authorizer.ts'",children:"import { Injectable } from '@nestjs/common';\nimport { Authorizer } from '@ptc-org/nestjs-query-graphql';\nimport { Filter } from '@ptc-org/nestjs-query-core';\nimport { UserContext } from '../auth/auth.interfaces';\nimport { SubTaskDTO } from './dto/sub-task.dto';\n\n@Injectable()\nexport class SubTaskAuthorizer implements CustomAuthorizer<SubTaskDTO> {\n  authorize(context: UserContext): Promise<Filter<SubTaskDTO>> {\n    return Promise.resolve({ ownerId: { eq: context.req.user.id } });\n  }\n\n  authorizeRelation(relationName: string, context: UserContext): Promise<Filter<unknown> | undefined> {\n    if (relationName === 'todoItem') {\n      return Promise.resolve({ ownerId: { eq: context.req.user.id } });\n    }\n    return Promise.resolve(undefined);\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["To use the ",(0,r.jsx)(t.code,{children:"SubTaskAuthorizer"})," you only need to provide it as an argument to the ",(0,r.jsx)(t.code,{children:"@Authorize"})," decorator"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:"title='sub-task/sub-task.dto.ts' {8}",children:"import { Authorize, FilterableField, IDField, FilterableRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../../todo-item/dto/todo-item.dto';\nimport { UserDTO } from '../../user/user.dto';\nimport { SubTaskAuthorizer } from '../sub-task.authorizer';\n\n@ObjectType('SubTask')\n@Authorize(SubTaskAuthorizer)\n@FilterableRelation('owner', () => UserDTO)\n@FilterableRelation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\nexport class SubTaskDTO {\n  @IDField(() => ID)\n  id!: number;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField()\n  todoItemId!: string;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n\n  ownerId!: number;\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"using-authorizers-in-your-resolver",children:"Using Authorizers In Your Resolver"}),"\n",(0,r.jsxs)(t.p,{children:["The easiest way to leverage ",(0,r.jsx)(t.code,{children:"Authorizers"})," in a custom resolver is to use the ",(0,r.jsx)(t.code,{children:"AuthorizerInterceptor"})," and\n",(0,r.jsx)(t.code,{children:"AuthorizerFilter"})," param decorator."]}),"\n",(0,r.jsx)(t.p,{children:"In this example there are two important additions:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"AuthorizerInterceptor"})," is added to the ",(0,r.jsx)(t.code,{children:"TodoItemResolver"})," as an interceptor, this interceptor will add the\nauthorizer to the context so it can be used down stream"]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"AuthorizerFilter"})," param decorator uses the authorizer added by the interceptor to create an authorizer filter."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.resolver.ts" {9,17}',children:"import { Filter, InjectQueryService, mergeFilter, mergeQuery, QueryService } from '@ptc-org/nestjs-query-core';\nimport { AuthorizerInterceptor, AuthorizerFilter, ConnectionType } from '@ptc-org/nestjs-query-graphql';\nimport { Args, Query, Resolver } from '@nestjs/graphql';\nimport { UseInterceptors } from '@nestjs/common';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemConnection, TodoItemQuery } from './types';\n\n@Resolver(() => TodoItemDTO)\n@UseInterceptors(AuthorizerInterceptor(TodoItemDTO))\nexport class TodoItemResolver {\n  constructor(@InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>) {}\n\n  // Set the return type to the TodoItemConnection\n  @Query(() => TodoItemConnection)\n  async uncompletedTodoItems(\n    @Args() query: TodoItemQuery,\n    @AuthorizerFilter() authFilter: Filter<TodoItemDTO>,\n  ): Promise<ConnectionType<TodoItemDTO>> {\n    // add the completed filter the user provided filter\n    const filter: Filter<TodoItemDTO> = mergeFilter(query.filter ?? {}, { completed: { is: false } });\n    const uncompletedQuery = mergeQuery(query, { filter: mergeFilter(filter, authFilter) });\n    return TodoItemConnection.createFromPromise(\n      (q) => this.service.query(q),\n      uncompletedQuery,\n      (q) => this.service.count(q),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"injectauthorizer-decorator",children:"@InjectAuthorizer Decorator"}),"\n",(0,r.jsxs)(t.p,{children:["If you need access to an authorizer for a DTO you can use the ",(0,r.jsx)(t.code,{children:"@InjectAuthorizer"})," decorator."]}),"\n",(0,r.jsxs)(t.p,{children:["The most common use case for using the ",(0,r.jsx)(t.code,{children:"@InjectAuthorizer"})," decorator is when you are not using the autogenerated\nresolvers provided by ",(0,r.jsx)(t.code,{children:"nestjs-query"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["In this example the ",(0,r.jsx)(t.code,{children:"Authorizer"})," is injected as a ",(0,r.jsx)(t.code,{children:"readonly"})," property you can then use it for any custom methods."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.resolver.ts"',children:"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver, InjectAuthorizer } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver, Query, Args } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>,\n    @InjectAuthorizer(TodoItemDTO) readonly authorizer: Authorizer<TodoItemDTO>,\n  ) {\n    super(service);\n  }\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"important",children:(0,r.jsxs)(t.p,{children:["If you are extending the ",(0,r.jsx)(t.code,{children:"CRUDResolver"})," directly be sure to ",(0,r.jsxs)(t.a,{href:"/nestjs-query/docs/graphql/resolvers#crudresolver",children:["register your DTOs with the ",(0,r.jsx)(t.code,{children:"NestjsQueryGraphQLModule"})]})]})}),"\n",(0,r.jsx)(t.admonition,{type:"important",children:(0,r.jsxs)(t.p,{children:["When using ",(0,r.jsx)(t.code,{children:"@InjectAuthorizer"}),", the injected Authorizer is not the CustomAuthorizer, but the DefaultCRUDAuthorizer that internally uses the CustomAuthorizer.\nIf you want to use the CustomAuthorizer directly, inject it with ",(0,r.jsx)(t.code,{children:"@InjectCustomAuthorizer"})," instead."]})}),"\n",(0,r.jsx)(t.h2,{id:"authorize-depending-on-operation",children:"Authorize depending on operation"}),"\n",(0,r.jsx)(t.p,{children:"Sometimes it might be necessary to perform different authorization based on the kind of operation an user wants to execute.\nE.g. some users could be allowed to read all todo items but only update/delete their own."}),"\n",(0,r.jsxs)(t.p,{children:["In this case we can make use of the second parameter of the ",(0,r.jsx)(t.code,{children:"authorize"})," function in our ",(0,r.jsx)(t.code,{children:"CustomAuthorizer"})," or the one passed to the ",(0,r.jsx)(t.code,{children:"@Authorizer"})," decorator which gets passed additional ",(0,r.jsx)(t.code,{children:"AuthorizationContext"})," such as the name of the operation that should be authorized:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:"title='sub-task/sub-task.authorizer.ts'",children:"import { Injectable } from '@nestjs/common';\nimport { CustomAuthorizer } from '@ptc-org/nestjs-query-graphql';\nimport { Filter } from '@ptc-org/nestjs-query-core';\nimport { UserContext } from '../auth/auth.interfaces';\nimport { SubTaskDTO } from './dto/sub-task.dto';\n\n@Injectable()\nexport class SubTaskAuthorizer implements CustomAuthorizer<SubTaskDTO> {\n  authorize(context: UserContext, authorizationContext?: AuthorizationContext): Promise<Filter<SubTaskDTO>> {\n    if (authorizationContext?.readonly) {\n      return Promise.resolve({});\n    }\n\n    return Promise.resolve({ ownerId: { eq: context.req.user.id } });\n  }\n\n  authorizeRelation(relationName: string, context: UserContext): Promise<Filter<unknown>> {\n    if (relationName === 'todoItem') {\n      return Promise.resolve({ ownerId: { eq: context.req.user.id } });\n    }\n    return Promise.resolve({});\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"AuthorizationContext"})," has the following shape:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:"title='authorizer.ts'",children:"export enum OperationGroup {\n  READ = 'read',\n  AGGREGATE = 'aggregate',\n  CREATE = 'create',\n  UPDATE = 'update',\n  DELETE = 'delete',\n}\n\ninterface AuthorizationContext {\n  /** The name of the method that uses the @AuthorizeFilter decorator */\n  operationName: string;\n\n  /** The group this operation belongs to */\n  operationGroup: OperationGroup;\n\n  /** If the operation does not modify any entities */\n  readonly: boolean;\n\n  /** If the operation can affect multiple entities */\n  many: boolean;\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This context is automatically created for you when using the built-in resolvers.\nIf you authorize custom methods by using the ",(0,r.jsx)(t.code,{children:"@AuthorizerFilter()"}),", you should pass the context as argument to the decorator:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"@AuthorizerFilter({\n  operationName: 'completedTodoItems',\n  operationGroup: OperationGroup.READ,\n  readonly: true,\n  many: true\n})\n"})}),"\n",(0,r.jsxs)(t.p,{children:["You can leave out the ",(0,r.jsx)(t.code,{children:"operationName"})," to let the context use the name of the decorated Method.\nIf you leave out the ",(0,r.jsx)(t.code,{children:"readonly"})," property, it's inferred from the ",(0,r.jsx)(t.code,{children:"operationGroup"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"operationNames"})," of the generated CRUD resolver methods are similar to the ones of the ",(0,r.jsx)(t.a,{href:"/nestjs-query/docs/concepts/services",children:"QueryService"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"queryMany"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"findById"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"aggregate"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"createOne"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"createMany"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"updateOne"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"updateMany"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"deleteOne"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"deleteMany"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Relations"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"query{PluralRelationName}"})," (e.g. querySubTasks)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"find{SingularRelationName}"})," (e.g. findTodoItem)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"aggregate{PluralRelationName}"})," (e.g. aggregateSubTasks)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"remove{SingularRelationName}from{SingularParentName}"})," (e.g. removeSubTaskFromTodoItem)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"remove{PluralRelationName}from{SingularParentName}"})," (e.g. removeSubTasksFromTodoItem)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"set{SingularRelationName}On{SingularParentName}"})," (e.g. setSubTaskOnTodoItem)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"add{PluralRelationName}On{SingularParentName}"})," (e.g. addSubTasksOnTodoItem)"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsxs)(t.p,{children:["You can find a complete example in ",(0,r.jsx)(t.a,{href:"https://github.com/tripss/nestjs-query/tree/master/examples/auth",children:(0,r.jsx)(t.code,{children:"examples/auth"})})]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(6540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);