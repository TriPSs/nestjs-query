"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[6846],{2936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=t(4848),r=t(8453);const s={title:"Hooks"},a=void 0,i={id:"graphql/hooks",title:"Hooks",description:"nestjs-query provides the following hooks that allow you to modify incoming requests.",source:"@site/docs/graphql/hooks.mdx",sourceDirName:"graphql",slug:"/graphql/hooks",permalink:"/nestjs-query/docs/graphql/hooks",draft:!1,unlisted:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/hooks.mdx",tags:[],version:"current",frontMatter:{title:"Hooks"},sidebar:"docs",previous:{title:"Mutations",permalink:"/nestjs-query/docs/graphql/mutations"},next:{title:"Authorization",permalink:"/nestjs-query/docs/graphql/authorization"}},d={},l=[{value:"@BeforeCreateOne",id:"beforecreateone",level:2},{value:"Hook Function",id:"hook-function",level:3},{value:"Hook Class",id:"hook-class",level:3},{value:"@BeforeCreateMany",id:"beforecreatemany",level:2},{value:"Hook Function",id:"hook-function-1",level:3},{value:"Hook Class",id:"hook-class-1",level:3},{value:"@BeforeUpdateOne",id:"beforeupdateone",level:2},{value:"Hook Fnction",id:"hook-fnction",level:3},{value:"Hook Class",id:"hook-class-2",level:3},{value:"@BeforeUpdateMany",id:"beforeupdatemany",level:2},{value:"Hook Function",id:"hook-function-2",level:3},{value:"Hook Class",id:"hook-class-3",level:3},{value:"Using Hooks In Custom Endpoints",id:"using-hooks-in-custom-endpoints",level:2},{value:"Example",id:"example",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"nestjs-query"})," provides the following hooks that allow you to modify incoming requests."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeFindOne"})," - invoked before any ",(0,o.jsx)(n.code,{children:"findOne"})," query."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeQueryMany"})," - invoked before any ",(0,o.jsx)(n.code,{children:"queryMany"})," query."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeCreateOne"})," - invoked before any ",(0,o.jsx)(n.code,{children:"createOne"})," mutation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeCreateMany"})," - invoked before any ",(0,o.jsx)(n.code,{children:"createMany"})," mutation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeUpdateOne"})," - invoked before any ",(0,o.jsx)(n.code,{children:"updateOne"})," mutation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeUpdateMany"})," - invoked before any ",(0,o.jsx)(n.code,{children:"updateMany"})," mutation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeDeleteOne"})," - invoked before any ",(0,o.jsx)(n.code,{children:"deleteOne"})," mutation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@BeforeDeleteMany"})," - invoked before any ",(0,o.jsx)(n.code,{children:"deleteMany"})," mutation."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In order to use a hook you only need to decorate your DTO with the corresponding decorator."}),"\n",(0,o.jsx)(n.p,{children:"Each hook decorator can be provided one of the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A hook function"}),"\n",(0,o.jsxs)(n.li,{children:["A class that extends ",(0,o.jsx)(n.code,{children:"Hook"}),", when using a class you can use DI to access other services just like ",(0,o.jsx)(n.code,{children:"guards"}),",\n",(0,o.jsx)(n.code,{children:"interceptors"})," or ",(0,o.jsx)(n.code,{children:"pipes"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"The graphql context by default only contains the incoming request!"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If you provide a custom ",(0,o.jsx)(n.code,{children:"create"})," or ",(0,o.jsx)(n.code,{children:"update"})," DTO you can also decorate those classes with corresponding decorators."]})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.p,{children:"All of the examples reference a GqlContext. This was defined for the sake of the example. It is recommended that you\ndefine a custom type that represents the information in the context based on the guards and interceptors used in your\napplication."}),(0,o.jsxs)(n.p,{children:["We have defined our ",(0,o.jsx)(n.code,{children:"GqlContext"})," as"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export type GqlContext = { req: { headers: Record<string, string> } };\n"})})]}),"\n",(0,o.jsx)(n.h2,{id:"beforecreateone",children:"@BeforeCreateOne"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@BeforeCreateOne"})," decorator can be used to modify incoming ",(0,o.jsx)(n.code,{children:"createOne"})," mutations with information from the graphql\ncontext."]}),"\n",(0,o.jsx)(n.h3,{id:"hook-function",children:"Hook Function"}),"\n",(0,o.jsx)(n.p,{children:"In this example we set the createdBy field based on the context."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{7-10}",children:"import { FilterableField, BeforeCreateOne, CreateOneInputType } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeCreateOne((input: CreateOneInputType<TodoItemDTO>, context: GqlContext) => {\n  input.input.createdBy = getUserName(context);\n  return input;\n})\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hook-class",children:"Hook Class"}),"\n",(0,o.jsxs)(n.p,{children:["You can also provide a custom ",(0,o.jsx)(n.code,{children:"Hook"})," class that can leverage ",(0,o.jsx)(n.code,{children:"nestjs"})," dependency injection."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we create a simple Hook that works with any type that has a ",(0,o.jsx)(n.code,{children:"createdBy"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { Injectable } from '@nestjs/common';\nimport { BeforeCreateOneHook, CreateOneInputType,} from '@ptc-org/nestjs-query-graphql';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface CreatedBy {\n  createdBy: string;\n}\n\n@Injectable()\nexport class CreatedByHook<T extends CreatedBy> implements BeforeCreateOneHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: CreateOneInputType<T>, context: GqlContext): Promise<CreateOneInputType<T>> {\n    const createdBy = await this.authService.getUserEmail(context.userId);\n    instance.input.createdBy = createdBy;\n    return instance;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we just provide the hook to the ",(0,o.jsx)(n.code,{children:"BeforeCreateOne"})," decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:"import { FilterableField, BeforeCreateOne } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeCreateOne(CreatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"beforecreatemany",children:"@BeforeCreateMany"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@BeforeCreateMany"})," decorator can be used to modify incoming ",(0,o.jsx)(n.code,{children:"createMany"})," mutations with information from the\ngraphql context."]}),"\n",(0,o.jsx)(n.h3,{id:"hook-function-1",children:"Hook Function"}),"\n",(0,o.jsx)(n.p,{children:"In this example we set the createdBy field on each record based on the context."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{7-11}",children:"import { FilterableField, BeforeCreateMany, CreateManyInputType } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeCreateMany((input: CreateManyInputType<TodoItemDTO>, context: GqlContext) => {\n  const createdBy = getUserName(context);\n  input.input = input.input.map((c) => ({ ...c, createdBy }));\n  return input;\n})\nexport class TodoItemDTO {\n\n   /**\n   Other fields\n   **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hook-class-1",children:"Hook Class"}),"\n",(0,o.jsxs)(n.p,{children:["You can also provide a custom ",(0,o.jsx)(n.code,{children:"Hook"})," class that can leverage ",(0,o.jsx)(n.code,{children:"nestjs"})," dependency injection."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we create a simple Hook that works with any type that has a ",(0,o.jsx)(n.code,{children:"createdBy"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { Injectable } from '@nestjs/common';\nimport { BeforeCreateManyHook, CreateManyInputType,} from '@ptc-org/nestjs-query-graphql';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface CreatedBy {\n  createdBy: string;\n}\n\n@Injectable()\nexport class CreatedByHook<T extends CreatedBy> implements BeforeCreateManyHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: CreateManyInputType<T>, context: GqlContext): Promise<CreateManyInputType<T>> {\n    const createdBy = await this.authService.getUserEmail(context.userId);\n    instance.input = instance.input.map((c) => ({ ...c, createdBy }));\n    return instance;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we just provide the hook to the ",(0,o.jsx)(n.code,{children:"BeforeCreateMany"})," decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:"import { FilterableField, BeforeCreateMany } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeCreateMany(CreatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"beforeupdateone",children:"@BeforeUpdateOne"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@BeforeUpdateOne"})," decorator can be used to modify incoming ",(0,o.jsx)(n.code,{children:"updateOne"})," mutations with information from the graphql\ncontext."]}),"\n",(0,o.jsx)(n.h3,{id:"hook-fnction",children:"Hook Fnction"}),"\n",(0,o.jsx)(n.p,{children:"In this example we set the updatedBy field in the update."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{7-10}",children:"import { FilterableField, BeforeUpdateOne, UpdateOneInputType } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeUpdateOne((input: UpdateOneInputType<TodoItemDTO>, context: GqlContext) => {\n  input.update.updatedBy = getUserName(context);\n  return input;\n})\nexport class TodoItemDTO {\n\n  /**\n  Other fields\n  **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hook-class-2",children:"Hook Class"}),"\n",(0,o.jsxs)(n.p,{children:["You can also provide a custom ",(0,o.jsx)(n.code,{children:"Hook"})," class that can leverage ",(0,o.jsx)(n.code,{children:"nestjs"})," dependency injection."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we create a simple Hook that works with any type that has a ",(0,o.jsx)(n.code,{children:"updatedBy"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { BeforeUpdateOneHook, UpdateOneInputType } from '@ptc-org/nestjs-query-graphql';\nimport { Injectable } from '@nestjs/common';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface UpdatedBy {\n  updatedBy: string;\n}\n\n@Injectable()\nexport class UpdatedByHook<T extends UpdatedBy> implements BeforeUpdateOneHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: UpdateOneInputType<T>, context: GqlContext): Promise<UpdateOneInputType<T>> {\n    // eslint-disable-next-line no-param-reassign\n    instance.update.updatedBy = await this.authService.getUserEmail(context.userId);\n    return instance;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we just provide the hook to the ",(0,o.jsx)(n.code,{children:"BeforeUpdateOne"})," decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:"import { FilterableField, BeforeUpdateOne } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeUpdateOne(UpdatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"beforeupdatemany",children:"@BeforeUpdateMany"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@BeforeUpdateMany"})," decorator can be used to modify incoming ",(0,o.jsx)(n.code,{children:"updateMany"})," mutations with information from the\ngraphql context."]}),"\n",(0,o.jsx)(n.h3,{id:"hook-function-2",children:"Hook Function"}),"\n",(0,o.jsx)(n.p,{children:"In this example we set the updatedBy field in the update."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{7-10}",children:"import { FilterableField, BeforeUpdateMany, UpdateManyInputType } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType } from '@nestjs/graphql';\nimport { GqlContext } from '../../interfaces';\nimport { getUserName } from '../../helpers';\n\n@ObjectType('TodoItem')\n@BeforeUpdateMany((input: UpdateManyInputType<TodoItemDTO, TodoItemDTO>, context: GqlContext) => {\n  input.update.updatedBy = getUserName(context);\n  return input;\n})\nexport class TodoItemDTO {\n\n  /**\n  Other fields\n  **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hook-class-3",children:"Hook Class"}),"\n",(0,o.jsxs)(n.p,{children:["You can also provide a custom ",(0,o.jsx)(n.code,{children:"Hook"})," class that can leverage ",(0,o.jsx)(n.code,{children:"nestjs"})," dependency injection."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we create a simple Hook that works with any type that has a ",(0,o.jsx)(n.code,{children:"updatedBy"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { BeforeUpdateManyHook, UpdateManyInputType } from '@ptc-org/nestjs-query-graphql';\nimport { Injectable } from '@nestjs/common';\nimport { GqlContext } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\n\ninterface UpdatedBy {\n  updatedBy: string;\n}\n\n@Injectable()\nexport class UpdatedByHook<T extends UpdatedBy> implements BeforeUpdateManyHook<T, GqlContext> {\n  constructor(readonly authService: AuthService) {}\n\n  async run(instance: UpdateManyInputType<T, T>, context: GqlContext): Promise<UpdateManyInputType<T, T>> {\n    // eslint-disable-next-line no-param-reassign\n    instance.update.updatedBy = await this.authService.getUserEmail(context.userId);\n    return instance;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we just provide the hook to the ",(0,o.jsx)(n.code,{children:"BeforeUpdateMany"})," decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:"import { FilterableField, BeforeUpdateMany } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { CreatedByHook } from '../../hooks';\n\n@ObjectType('TodoItem')\n@BeforeUpdateMany(UpdatedByHook)\nexport class TodoItemDTO {\n\n /**\n Other fields\n **/\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-hooks-in-custom-endpoints",children:"Using Hooks In Custom Endpoints"}),"\n",(0,o.jsxs)(n.p,{children:["You can also use hooks in custom endpoints by using the ",(0,o.jsx)(n.code,{children:"HookInterceptor"})," along with"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"HookArgs"})," - Used to apply hooks to any query endpoint."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MutationHookArgs"})," - Used to apply hooks to any ",(0,o.jsx)(n.code,{children:"mutation"})," that uses ",(0,o.jsx)(n.code,{children:"MutationArgsType"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.p,{children:"In this example we'll create an endpoint that marks all todo items that are currently not completed as completed."}),"\n",(0,o.jsx)(n.p,{children:"To start we'll create our input types."}),"\n",(0,o.jsx)(n.p,{children:"There are two types that are created"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"UpdateManyTodoItemsInput"})," which extends the ",(0,o.jsx)(n.code,{children:"UpdateManyInputType"})," this exposes an ",(0,o.jsx)(n.code,{children:"update"})," and ",(0,o.jsx)(n.code,{children:"filter"})," field just like the ",(0,o.jsx)(n.code,{children:"updateMany"})," endpoints that are auto generated."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"UpdateManyTodoItemsArgs"})," which extends ",(0,o.jsx)(n.code,{children:"MutationArgsType"}),", this provides a uniform interface for all mutations\nensuring that the argument provided to the mutation is named ",(0,o.jsx)(n.code,{children:"input"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/types.ts"',children:"import { MutationArgsType, UpdateManyInputType } from '@ptc-org/nestjs-query-graphql';\nimport { ArgsType, InputType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemUpdateDTO } from './dto/todo-item-update.dto';\n\n// create the base input type\n@InputType()\nexport class MarkTodoItemsAsCompletedInput extends UpdateManyInputType(TodoItemDTO, TodoItemUpdateDTO) {}\n\n// Wrap the input in the MutationArgsType to provide a uniform format for all mutations\n// The `MutationArgsType` is a thin wrapper that names the args as input\n@ArgsType()\nexport class MarkTodoItemsAsCompletedArgs extends MutationArgsType(UpdateManyTodoItemsInput) {}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now we can use our new types in the resolver."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.resolver.ts" {16,17}',children:"import { InjectQueryService, mergeFilter, QueryService, UpdateManyResponse } from '@ptc-org/nestjs-query-core';\nimport { HookTypes, HookInterceptor, MutationHookArgs, UpdateManyResponseType } from '@ptc-org/nestjs-query-graphql';\nimport { UseInterceptors } from '@nestjs/common';\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { MarkTodoItemsAsCompletedArgs } from './types';\nimport { TodoItemUpdateDTO } from './dto/todo-item-update.dto';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver {\n  constructor(@InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemDTO>) {}\n\n  // Set the return type to the TodoItemConnection\n  @Mutation(() => UpdateManyResponseType())\n  @UseInterceptors(HookInterceptor(HookTypes.BEFORE_UPDATE_MANY, TodoItemUpdateDTO))\n  markTodoItemsAsCompleted(@MutationHookArgs() { input }: MarkTodoItemsAsCompletedArgs): Promise<UpdateManyResponse> {\n    return this.service.updateMany(\n      { ...input.update, completed: true },\n      mergeFilter(input.filter, { completed: { is: false } }),\n    );\n  }\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"The first thing to notice is the"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"@UseInterceptors(HookInterceptor(HookTypes.BEFORE_UPDATE_MANY, TodoItemUpdateDTO))\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This interceptor adds the correct hook to the ",(0,o.jsx)(n.code,{children:"context"})," to be used by the param decorator."]}),"\n",(0,o.jsx)(n.p,{children:"There are a few things to take note of:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"HookTypes.BEFORE_UPDATE_MANY"})," lets the interceptor know we are wanting the BeforeUpdateMany hook to be used\nfor this mutation."]}),"\n",(0,o.jsxs)(n.li,{children:["We use the ",(0,o.jsx)(n.code,{children:"TodoItemUpdateDTO"}),", that is because the ",(0,o.jsx)(n.code,{children:"@BeforeUpdateMany"})," decorator was put on the\n",(0,o.jsx)(n.code,{children:"TodoItemUpdateDTO"})," not the ",(0,o.jsx)(n.code,{children:"TodoItemDTO"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"When using the HookInterceptor you must use the DTO that you added the hook decorator to."})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["In this example we bind the ",(0,o.jsx)(n.code,{children:"BEFORE_UPDATE_MANY"})," hook, you can use any of the hooks available to bind to the correct\none when ",(0,o.jsx)(n.code,{children:"creating"}),", ",(0,o.jsx)(n.code,{children:"updating"}),", or ",(0,o.jsx)(n.code,{children:"deleting"})," records."]})}),"\n",(0,o.jsx)(n.p,{children:"The next piece is the"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"@MutationHookArgs() { input }: UpdateManyTodoItemsArgs\n"})}),"\n",(0,o.jsxs)(n.p,{children:["By using the ",(0,o.jsx)(n.code,{children:"MutationHookArgs"})," decorator we ensure that the hook is applied to the arguments adding any additional\nfields to the update."]}),"\n",(0,o.jsxs)(n.p,{children:["Finally we invoke the service ",(0,o.jsx)(n.code,{children:"updateMany"})," with a filter that ensures we only update ",(0,o.jsx)(n.code,{children:"TodoItems"})," that are completed,\nand add an setting ",(0,o.jsx)(n.code,{children:"completed"})," to true to the update"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"return this.service.updateMany(\n  { ...input.update, completed: false },\n  mergeFilter(input.filter, { completed: { is: false } }),\n);\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);