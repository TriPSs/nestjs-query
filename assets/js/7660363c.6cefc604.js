"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[9891],{1347:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var o=t(4164);const s={tabItem:"tabItem_Ymn6"};var l=t(4848);function r(e){var n=e.children,t=e.hidden,r=e.className;return(0,l.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,r),hidden:t,children:n})}},3384:(e,n,t)=>{t.d(n,{A:()=>I});var o=t(6540),s=t(4164),l=t(5236),r=t(6347),i=t(8385),a=t(5793),d=t(7422),c=t(2152);function u(e){var n,t;return null!=(n=null==(t=o.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,o.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){var n=e.values,t=e.children;return(0,o.useMemo)((function(){var e=null!=n?n:function(e){return u(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,d.XI)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,s=e.groupId,l=(0,r.W6)(),i=function(e){var n=e.queryString,t=void 0!==n&&n,o=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=o?o:null}({queryString:t,groupId:s});return[(0,a.aZ)(i),(0,o.useCallback)((function(e){if(i){var n=new URLSearchParams(l.location.search);n.set(i,e),l.replace(Object.assign({},l.location,{search:n.toString()}))}}),[i,l])]}function x(e){var n,t,s,l,r=e.defaultValue,a=e.queryString,d=void 0!==a&&a,u=e.groupId,x=h(e),j=(0,o.useState)((function(){return function(e){var n,t=e.defaultValue,o=e.tabValues;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:o}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+o.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var s=null!=(n=o.find((function(e){return e.default})))?n:o[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:r,tabValues:x})})),b=j[0],g=j[1],T=m({queryString:d,groupId:u}),f=T[0],y=T[1],I=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,c.Dv)(n),s=t[0],l=t[1],[s,(0,o.useCallback)((function(e){n&&l.set(e)}),[n,l])]),v=I[0],k=I[1],D=function(){var e=null!=f?f:v;return p({value:e,tabValues:x})?e:null}();return(0,i.A)((function(){D&&g(D)}),[D]),{selectedValue:b,selectValue:(0,o.useCallback)((function(e){if(!p({value:e,tabValues:x}))throw new Error("Can't select invalid tab value="+e);g(e),y(e),k(e)}),[y,k,x]),tabValues:x}}var j=t(195);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function T(e){var n=e.className,t=e.block,o=e.selectedValue,r=e.selectValue,i=e.tabValues,a=[],d=(0,l.a_)().blockElementScrollPositionUntilNextRender,c=function(e){var n=e.currentTarget,t=a.indexOf(n),s=i[t].value;s!==o&&(d(n),r(s))},u=function(e){var n,t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var o,s=a.indexOf(e.currentTarget)+1;t=null!=(o=a[s])?o:a[0];break;case"ArrowLeft":var l,r=a.indexOf(e.currentTarget)-1;t=null!=(l=a[r])?l:a[a.length-1]}null==(n=t)||n.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((function(e){var n=e.value,t=e.label,l=e.attributes;return(0,g.jsx)("li",Object.assign({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:function(e){return a.push(e)},onKeyDown:u,onClick:c},l,{className:(0,s.A)("tabs__item",b.tabItem,null==l?void 0:l.className,{"tabs__item--active":o===n}),children:null!=t?t:n}),n)}))})}function f(e){var n=e.lazy,t=e.children,l=e.selectedValue,r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var i=r.find((function(e){return e.props.value===l}));return i?(0,o.cloneElement)(i,{className:(0,s.A)("margin-top--md",i.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==l})}))})}function y(e){var n=x(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,g.jsx)(T,Object.assign({},n,e)),(0,g.jsx)(f,Object.assign({},n,e))]})}function I(e){var n=(0,j.A)();return(0,g.jsx)(y,Object.assign({},e,{children:u(e.children)}),String(n))}},8131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var o=t(4848),s=t(8453),l=t(3384),r=t(1347);const i={title:"Relations"},a=void 0,d={id:"graphql/relations",title:"Relations",description:"When using the nestjs-query you can specify relations that should be exposed for the DTO using the following decorators.",source:"@site/docs/graphql/relations.mdx",sourceDirName:"graphql",slug:"/graphql/relations",permalink:"/nestjs-query/docs/graphql/relations",draft:!1,unlisted:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/relations.mdx",tags:[],version:"current",frontMatter:{title:"Relations"},sidebar:"docs",previous:{title:"Subscriptions",permalink:"/nestjs-query/docs/graphql/subscriptions"},next:{title:"Types",permalink:"/nestjs-query/docs/graphql/types"}},c={},u=[{value:"@Relation",id:"relation",level:2},{value:"Example",id:"example",level:3},{value:"@FilterableRelation",id:"filterablerelation",level:2},{value:"Example",id:"example-1",level:3},{value:"@UnPagedRelation",id:"unpagedrelation",level:2},{value:"Example",id:"example-2",level:3},{value:"@FilterableUnPagedRelation",id:"filterableunpagedrelation",level:2},{value:"Example",id:"example-3",level:3},{value:"@OffsetConnection",id:"offsetconnection",level:2},{value:"Example",id:"example-4",level:3},{value:"Total Count Example",id:"total-count-example",level:3},{value:"@FilterableOffsetConnection",id:"filterableoffsetconnection",level:2},{value:"Example",id:"example-5",level:3},{value:"@CursorConnection",id:"cursorconnection",level:2},{value:"Example",id:"example-6",level:3},{value:"Total Count Example",id:"total-count-example-1",level:3},{value:"@FilterableCursorConnection",id:"filterablecursorconnection",level:2},{value:"Example",id:"example-7",level:3},{value:"Virtual Relations",id:"virtual-relations",level:2},{value:"Options",id:"options",level:2},{value:"Custom Relation Name",id:"custom-relation-name",level:3},{value:"GraphQL lookahead",id:"graphql-lookahead",level:3},{value:"Disable Reads",id:"disable-reads",level:3},{value:"Disable <code>filter</code> or <code>sorting</code> in relations",id:"disable-filter-or-sorting-in-relations",level:4},{value:"Enable Updates",id:"enable-updates",level:3},{value:"Enable Removes",id:"enable-removes",level:3},{value:"Guards, Pipes and Filters",id:"guards-pipes-and-filters",level:3},{value:"Relation Mixin",id:"relation-mixin",level:3},{value:"Relatable",id:"relatable",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["When using the ",(0,o.jsx)(n.code,{children:"nestjs-query"})," you can specify relations that should be exposed for the DTO using the following decorators."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Relation"})," - A relation that is a single value (one-to-one, many-to-one)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@FilterableRelation"})," - A ",(0,o.jsx)(n.code,{children:"@Relation"})," that enables filtering the parent by fields of the relation ",(0,o.jsx)(n.code,{children:"DTO"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@UnPagedRelation"})," - An array of relations (e.g, many-to-many, one-to-many) that returns all of the related records."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"})," - An ",(0,o.jsx)(n.code,{children:"@UnPagedRelation"})," that enables filtering the parent by fields of the relation\n",(0,o.jsx)(n.code,{children:"DTO"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@OffsetConnection"})," - A connection that represents a collection (e.g, many-to-many, one-to-many) that uses ",(0,o.jsx)(n.code,{children:"offset"}),"\nbased pagination."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@FilterableOffsetConnection"})," - An ",(0,o.jsx)(n.code,{children:"@OffsetConnection"})," that enables filtering the parent by fields of the connection\n",(0,o.jsx)(n.code,{children:"DTO"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@CursorConnection"})," - A connection that represents a collection (e.g, many-to-many, one-to-many) that uses ",(0,o.jsx)(n.code,{children:"cursor"}),"\nbased pagination."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@FilterableCursorConnection"})," - A ",(0,o.jsx)(n.code,{children:"@CursorConnection"})," that enables filtering the parent by fields of the\nconnection ",(0,o.jsx)(n.code,{children:"DTO"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"}),", ",(0,o.jsx)(n.code,{children:"@FilterableOffsetConnection"}),", and ",(0,o.jsx)(n.code,{children:"@FilterableCursorConnection"})," are not supported by\nmongoose!"]})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["When loading relations a ",(0,o.jsx)(n.a,{href:"https://github.com/graphql/dataloader",children:"dataloader"})," that is scoped to the request will be used. This prevents the n+1 problem."]})}),"\n",(0,o.jsx)(n.p,{children:"In the following examples we are going to use the following entities."}),"\n",(0,o.jsxs)(l.A,{defaultValue:"todoitementity",values:[{label:"TodoItemEntity",value:"todoitementity"},{label:"SubTaskEntity",value:"subtaskentity"}],children:[(0,o.jsx)(r.A,{value:"todoitementity",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.entity.ts"',children:"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn, OneToMany } from 'typeorm';\nimport { SubTaskEntity } from '../sub-task/sub-task.entity';\n\n@Entity()\nexport class TodoItemEntity {\n  @PrimaryGeneratedColumn()\n  id!: string;\n\n  @Column()\n  title!: string;\n\n  @Column()\n  completed!: boolean;\n\n  @OneToMany(\n    () => SubTaskEntity,\n    subTask => subTask.todoItem,\n  )\n  subTasks!: SubTaskEntity[];\n\n  @CreateDateColumn()\n  created!: Date;\n\n  @UpdateDateColumn()\n  updated!: Date;\n}\n\n"})})}),(0,o.jsx)(r.A,{value:"subtaskentity",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.entity.ts"',children:"import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ObjectType,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { TodoItemEntity } from '../todo-item/todo-item.entity';\n\n@Entity()\nexport class SubTaskEntity {\n  @PrimaryGeneratedColumn()\n  id!: string;\n\n  @Column()\n  title!: string;\n\n  @Column()\n  completed!: boolean;\n\n  @Column({ nullable: false })\n  todoItemId!: string;\n\n  @ManyToOne(\n    (): ObjectType<TodoItemEntity> => TodoItemEntity,\n    td => td.subTasks,\n    { onDelete: 'CASCADE', nullable: false },\n  )\n  @JoinColumn()\n  todoItem!: TodoItemEntity;\n\n  @CreateDateColumn()\n  created!: Date;\n\n  @UpdateDateColumn()\n  updated!: Date;\n}\n\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"relation",children:"@Relation"}),"\n",(0,o.jsx)(n.p,{children:"A relation that is a single value (one-to-one, many-to-one)"}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["Based on the entities defined above we can add a ",(0,o.jsx)(n.code,{children:"todoItem"})," relation to the ",(0,o.jsx)(n.code,{children:"SubTask"})," by creating the following ",(0,o.jsx)(n.code,{children:"SubTaskDTO"})," with a ",(0,o.jsx)(n.code,{children:"@Relation"})," decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {6}',children:"import { FilterableField, IDField, Relation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../todo-item/todo-item.dto.ts';\n\n@ObjectType('SubTask')\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\nexport class SubTaskDTO {\n  @FilterableField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField()\n  todoItemId!: string;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@Relation"})," decorator lets ",(0,o.jsx)(n.code,{children:"nestjs-query"})," know to expose the following endpoints:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"subTask.todoItem"})," - A ",(0,o.jsx)(n.code,{children:"query"})," to retrieve the ",(0,o.jsx)(n.code,{children:"SubTasks"})," ",(0,o.jsx)(n.code,{children:"TodoItem"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setTodoItemOnSubTask"})," - A ",(0,o.jsx)(n.code,{children:"mutation"})," to set the ",(0,o.jsx)(n.code,{children:"TodoItem"})," on a ",(0,o.jsx)(n.code,{children:"SubTask"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"removeTodoItemFromSubTask"})," - A ",(0,o.jsx)(n.code,{children:"mutation"})," to remove a ",(0,o.jsx)(n.code,{children:"TodoItem"}),"/",(0,o.jsx)(n.code,{children:"SubTask"})," relation.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NOTE"})," This does not typically remove either record just removes the relation."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To set up the resolver you can use the ",(0,o.jsx)(n.code,{children:"NestjsQueryGraphQLModule"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { SubTaskDTO } from './sub-task.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([SubTaskEntity])],\n      resolvers: [{ DTOClass: SubTaskDTO, EntityClass: SubTaskEntity }],\n    }),\n  ],\n})\nexport class SubTaskModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"@ptc-org/nestjs-query-graphql"})," will then automatically create the following graphql definition:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type SubTask {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  todoItemId: String!\n  todoItem: TodoItem!\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following mutations will also be automatically exposed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n  setTodoItemOnSubTask(input: RelationInput!): SubTask!\n}\n\ninput RelationInput {\n  id: ID!\n  relationId: ID!\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"remove.enabled"})," was set to ",(0,o.jsx)(n.code,{children:"true"})," a ",(0,o.jsx)(n.code,{children:"removeTodoItemFromSubTask"})," mutation would also be exposed with the same arguments as ",(0,o.jsx)(n.code,{children:"setTodoItemOnSubTask"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"filterablerelation",children:"@FilterableRelation"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableRelation"})," extends the ",(0,o.jsx)(n.code,{children:"@Relation"})," decorator exposing the ability to filter the ",(0,o.jsx)(n.code,{children:"DTO"})," that defines the relation by relation properties."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableRelation"})," decorator will ",(0,o.jsx)(n.strong,{children:"only"})," work with relations defined by the orm used (e.g. ",(0,o.jsx)(n.code,{children:"typeorm"}),",\n",(0,o.jsx)(n.code,{children:"sequelize"}),"). If your relations are federated or you are using ",(0,o.jsx)(n.code,{children:"mongoose"})," you cannot use the ",(0,o.jsx)(n.code,{children:"@FilterableRelation"}),"\ndecorator."]})}),"\n",(0,o.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,o.jsx)(n.code,{children:"SubTasks"})," by ",(0,o.jsx)(n.code,{children:"TodoItems"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {6}',children:"import { FilterableField, IDField, FilterableRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../todo-item/todo-item.dto.ts';\n\n@ObjectType('SubTask')\n@FilterableRelation('todoItem', () => TodoItemDTO)\nexport class SubTaskDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField(() => ID)\n  todoItemId!: string;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Notice the use of ",(0,o.jsx)(n.code,{children:"@FilterableRelation"})," instead of ",(0,o.jsx)(n.code,{children:"@Relation"}),", by using the ",(0,o.jsx)(n.code,{children:"@FilterableRelation"})," version ",(0,o.jsx)(n.code,{children:"nestjs-query"})," will allow filtering on the ",(0,o.jsx)(n.code,{children:"todoItem"})," relation."]}),"\n",(0,o.jsx)(n.p,{children:"The  module definition remains the same."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { SubTaskDTO } from './sub-task.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([SubTaskEntity])],\n      resolvers: [{ DTOClass: SubTaskDTO, EntityClass: SubTaskEntity }],\n    }),\n  ],\n})\nexport class SubTaskModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When querying for ",(0,o.jsx)(n.code,{children:"SubTasks"})," you can now also filter on ",(0,o.jsx)(n.code,{children:"todoItem"})," properties."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll find all subTasks that are related to a ",(0,o.jsx)(n.code,{children:"todoItem"})," with a title that starts with ",(0,o.jsx)(n.code,{children:"Created"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:'{\n  subTasks(filter: { todoItem: { title: { like: "Create%" } } }) {\n    title\n    completed\n  }\n}\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"unpagedrelation",children:"@UnPagedRelation"}),"\n",(0,o.jsxs)(n.p,{children:["You can also use the ",(0,o.jsx)(n.code,{children:"@UnPagedRelation"})," decorator to define a relation that does not use paging and returns an array\nof all the related records."]}),"\n",(0,o.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["Based on the entity definition above we can define a ",(0,o.jsx)(n.code,{children:"TodoItemDTO"})," with a ",(0,o.jsx)(n.code,{children:"subTasks"})," relation."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',children:"import { FilterableField, IDField, UnPagedRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@UnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"When specifying a many relation a couple of endpoints will automatically be generated. In this example the following are generated."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"todoItem.subTasks"})," - A ",(0,o.jsx)(n.code,{children:"query"})," endpoint to retrieve a ",(0,o.jsx)(n.code,{children:"TodoItems"})," ",(0,o.jsx)(n.code,{children:"SubTasks"}),".","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"subTasks"})," property will accept a ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/concepts/queries",children:"query"})," to allow you to filter, and sort results."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"subTasks"})," will be returned as an array of results."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"addSubTasksToTodoItem"})," - A ",(0,o.jsx)(n.code,{children:"mutation"})," to add ",(0,o.jsx)(n.code,{children:"SubTasks"})," to a ",(0,o.jsx)(n.code,{children:"TodoItem"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To set up the resolver you can use the ",(0,o.jsx)(n.code,{children:"NestjsQueryGraphQLModule"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The generated schema will contain a ",(0,o.jsx)(n.code,{children:"TodoItem"})," type like the following."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    filter: SubTaskFilter = {}\n    sorting: [SubTaskSort!] = []\n  ): [SubTask!]!\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following mutations will also be automatically exposed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n   addSubTasksToTodoItem(input: RelationsInput!): TodoItem!\n}\n\ninput RelationsInput {\n  id: ID!\n  relationIds: [ID!]!\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"remove.enabled"})," was set to ",(0,o.jsx)(n.code,{children:"true"})," a ",(0,o.jsx)(n.code,{children:"removeSubTasksFromTodoItem"})," mutation would also be exposed with the same arguments as ",(0,o.jsx)(n.code,{children:"addSubTasksToTodoItem"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"filterableunpagedrelation",children:"@FilterableUnPagedRelation"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"})," extends the ",(0,o.jsx)(n.code,{children:"@UnPagedRelation"})," decorator exposing the ability to filter the ",(0,o.jsx)(n.code,{children:"DTO"})," that\ndefines the relation by relation properties."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"})," decorator will ",(0,o.jsx)(n.strong,{children:"only"})," work with relations defined by the orm used (e.g. ",(0,o.jsx)(n.code,{children:"typeorm"}),",\n",(0,o.jsx)(n.code,{children:"sequelize"}),"). If your relations are federated or you are using ",(0,o.jsx)(n.code,{children:"mongoose"})," you cannot use the ",(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"}),"\ndecorator."]})}),"\n",(0,o.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,o.jsx)(n.code,{children:"TodoItems"}),"\nby ",(0,o.jsx)(n.code,{children:"SubTasks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {6}',children:"import { FilterableField, IDField, FilterableUnPagedRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@FilterableUnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Notice the use of ",(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"})," instead of ",(0,o.jsx)(n.code,{children:"@UnPagedRelation"}),", by using the\n",(0,o.jsx)(n.code,{children:"@FilterableUnPagedRelation"})," version ",(0,o.jsx)(n.code,{children:"nestjs-query"})," will allow filtering on the ",(0,o.jsx)(n.code,{children:"subTasks"})," relation."]}),"\n",(0,o.jsx)(n.p,{children:"The  module definition remains the same."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When querying for ",(0,o.jsx)(n.code,{children:"TodoItems"})," you can now also filter on ",(0,o.jsx)(n.code,{children:"subTasks"})," properties."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll find all ",(0,o.jsx)(n.code,{children:"todoItems"})," that are related to a ",(0,o.jsx)(n.code,{children:"subTasks"})," that are completed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"{\n  todoItems(filter: { subTasks: { completed: { is: true } } }) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        title\n        description\n        completed\n        subTasks {\n          title\n          description\n          completed\n        }\n      }\n      cursor\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"offsetconnection",children:"@OffsetConnection"}),"\n",(0,o.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["Based on the entity definitions above we can create a ",(0,o.jsx)(n.code,{children:"TodoItemDTO"})," with a connection to the ",(0,o.jsx)(n.code,{children:"subTasks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',children:"import { FilterableField, IDField, OffsetConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When specifying a ",(0,o.jsx)(n.code,{children:"@OffsetConnection"})," relation a couple of endpoints will automatically be generated. In this example\nthe following are generated."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"todoItem.subTasks"})," - A ",(0,o.jsx)(n.code,{children:"query"})," to retrieve a ",(0,o.jsx)(n.code,{children:"TodoItems"})," ",(0,o.jsx)(n.code,{children:"SubTasks"}),".","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"subTasks"})," property will accept a ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/concepts/queries",children:"query"})," to allow you to filter, page and sort results."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"subTasks"})," property will return a offset based ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/graphql/types#connectiontype",children:"connection"})," to page through\nresults."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"addSubTasksToTodoItem"})," - A ",(0,o.jsx)(n.code,{children:"mutation"})," to add ",(0,o.jsx)(n.code,{children:"SubTasks"})," to a ",(0,o.jsx)(n.code,{children:"TodoItem"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To set up the resolver you can use the ",(0,o.jsx)(n.code,{children:"NestjsQueryGraphQLModule"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The generated schema will contain a ",(0,o.jsx)(n.code,{children:"TodoItem"})," type like the following."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: OffsetPaging = { limit: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following mutations will also be automatically exposed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n   addSubTasksToTodoItem(input: RelationsInput!): TodoItem!\n}\n\ninput RelationsInput {\n  id: ID!\n  relationIds: [ID!]!\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"remove.enabled"})," was set to ",(0,o.jsx)(n.code,{children:"true"})," a ",(0,o.jsx)(n.code,{children:"removeSubTasksFromTodoItem"})," mutation would also be exposed with the same arguments as ",(0,o.jsx)(n.code,{children:"addSubTasksToTodoItem"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"total-count-example",children:"Total Count Example"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["Enabling ",(0,o.jsx)(n.code,{children:"totalCount"})," can be expensive. If your table is large the ",(0,o.jsx)(n.code,{children:"totalCount"})," query may be expensive, use with caution."]})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"totalCount"})," field is not eagerly fetched. It will only be executed if the field is queried from the client."]})}),"\n",(0,o.jsxs)(n.p,{children:["When using the ",(0,o.jsx)(n.code,{children:"@OffsetConnection"})," decorator you can enable the ",(0,o.jsx)(n.code,{children:"totalCount"})," field. The ",(0,o.jsx)(n.code,{children:"totalCount"})," field will return the total number of records included in the connection."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',children:"import { FilterableField, IDField, OffsetConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true }, enableTotalCount: true })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The generated graphql will include a ",(0,o.jsx)(n.code,{children:"TodoItemSubTasksConnection"})," with a ",(0,o.jsx)(n.code,{children:"totalCount"})," field."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",metastring:"{19}",children:"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: OffsetPaging = { limit: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n\ntype TodoItemSubTasksConnection {\n  pageInfo: OffsetPageInfo!\n  nodes: [SubTask!]!\n  totalCount: Int!\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"filterableoffsetconnection",children:"@FilterableOffsetConnection"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableOffsetConnection"})," extends the ",(0,o.jsx)(n.code,{children:"@OffsetConnection"})," decorator exposing the ability to filter the ",(0,o.jsx)(n.code,{children:"DTO"}),"\nthat defines the relation by relation properties."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableOffsetConnection"})," decorator will ",(0,o.jsx)(n.strong,{children:"only"})," work with relations defined by the orm used (e.g. ",(0,o.jsx)(n.code,{children:"typeorm"}),",\n",(0,o.jsx)(n.code,{children:"sequelize"}),"). If your relations are federated or you are using ",(0,o.jsx)(n.code,{children:"mongoose"})," you cannot use the ",(0,o.jsx)(n.code,{children:"@FilterableConnection"}),"\ndecorator."]})}),"\n",(0,o.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,o.jsx)(n.code,{children:"TodoItems"})," by ",(0,o.jsx)(n.code,{children:"subTasks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {7}',children:"import { FilterableField, IDField, FilterableOffsetConnection, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@QueryOptions({ pagingStrategy: PagingStrategies.OFFSET })\n@FilterableOffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Notice the use of ",(0,o.jsx)(n.code,{children:"@FilterableOffsetConnection"})," instead of ",(0,o.jsx)(n.code,{children:"@OffsetConnection"}),", by using the\n",(0,o.jsx)(n.code,{children:"@FilterableOffsetConnection"})," version ",(0,o.jsx)(n.code,{children:"nestjs-query"})," will allow filtering on the ",(0,o.jsx)(n.code,{children:"subTasks"})," relation."]}),"\n",(0,o.jsx)(n.p,{children:"The  module definition remains the same."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',children:"import { PagingStrategies } from '@ptc-org/nestjs-query-core';\nimport { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When querying for ",(0,o.jsx)(n.code,{children:"TodoItems"})," you can now also filter on ",(0,o.jsx)(n.code,{children:"subTasks"})," properties."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll find all ",(0,o.jsx)(n.code,{children:"todoItems"})," that have ",(0,o.jsx)(n.code,{children:"subTasks"})," that are completed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"{\n  todoItems(filter: { subTasks: { completed: { is: true } } }) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n    }\n    nodes {\n      id\n      title\n      description\n      completed\n      subTasks {\n        nodes {\n          title\n          description\n          completed\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"cursorconnection",children:"@CursorConnection"}),"\n",(0,o.jsx)(n.h3,{id:"example-6",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["Based on the entity definitions above we can create a ",(0,o.jsx)(n.code,{children:"TodoItemDTO"})," with a connection to the ",(0,o.jsx)(n.code,{children:"subTasks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',children:"import { FilterableField, IDField, CursorConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When specifying a ",(0,o.jsx)(n.code,{children:"@CursorConnection"})," relation a couple of endpoints will automatically be generated. In this example\nthe\nfollowing are generated."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"todoItem.subTasks"})," - A ",(0,o.jsx)(n.code,{children:"query"})," to retrieve a ",(0,o.jsx)(n.code,{children:"TodoItems"})," ",(0,o.jsx)(n.code,{children:"SubTasks"}),".","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"subTasks"})," property will accept a ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/concepts/queries",children:"query"})," to allow you to filter, page and sort results."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"subTasks"})," property will return a cursor based ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/graphql/types#connectiontype",children:"connection"})," to page through\nresults."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"addSubTasksToTodoItem"})," - A ",(0,o.jsx)(n.code,{children:"mutation"})," to add ",(0,o.jsx)(n.code,{children:"SubTasks"})," to a ",(0,o.jsx)(n.code,{children:"TodoItem"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To set up the resolver you can use the ",(0,o.jsx)(n.code,{children:"NestjsQueryGraphQLModule"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The generated schema will contain a ",(0,o.jsx)(n.code,{children:"TodoItem"})," type like the following."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: CursorPaging = { first: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following mutations will also be automatically exposed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\n   addSubTasksToTodoItem(input: RelationsInput!): TodoItem!\n}\n\ninput RelationsInput {\n  id: ID!\n  relationIds: [ID!]!\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"remove.enabled"})," was set to ",(0,o.jsx)(n.code,{children:"true"})," a ",(0,o.jsx)(n.code,{children:"removeSubTasksFromTodoItem"})," mutation would also be exposed with the same arguments as ",(0,o.jsx)(n.code,{children:"addSubTasksToTodoItem"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"total-count-example-1",children:"Total Count Example"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["Enabling ",(0,o.jsx)(n.code,{children:"totalCount"})," can be expensive. If your table is large the ",(0,o.jsx)(n.code,{children:"totalCount"})," query may be expensive, use with caution."]})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"totalCount"})," field is not eagerly fetched. It will only be executed if the field is queried from the client."]})}),"\n",(0,o.jsxs)(n.p,{children:["When using the ",(0,o.jsx)(n.code,{children:"@CursorConnection"})," decorator you can enable the ",(0,o.jsx)(n.code,{children:"totalCount"})," field. The ",(0,o.jsx)(n.code,{children:"totalCount"})," field will return the total number of records included in the connection."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',children:"import { FilterableField, IDField, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true }, enableTotalCount: true })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The generated graphql will include a ",(0,o.jsx)(n.code,{children:"TodoItemSubTasksConnection"})," with a ",(0,o.jsx)(n.code,{children:"totalCount"})," field."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",metastring:"{19}",children:"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: CursorPaging = { first: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n\ntype TodoItemSubTasksConnection {\n  pageInfo: PageInfo!\n  edges: [SubTaskEdge!]!\n  totalCount: Int!\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"filterablecursorconnection",children:"@FilterableCursorConnection"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableCursorConnection"})," extends the ",(0,o.jsx)(n.code,{children:"@CursorConnection"})," decorator exposing the ability to filter the ",(0,o.jsx)(n.code,{children:"DTO"})," that defines the relation by relation properties."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@FilterableCursorConnection"})," decorator will ",(0,o.jsx)(n.strong,{children:"only"})," work with relations defined by the orm used (e.g. ",(0,o.jsx)(n.code,{children:"typeorm"}),",\n",(0,o.jsx)(n.code,{children:"sequelize"}),"). If your relations are federated or you are using ",(0,o.jsx)(n.code,{children:"mongoose"})," you cannot use the ",(0,o.jsx)(n.code,{children:"@FilterableConnection"}),"\ndecorator."]})}),"\n",(0,o.jsx)(n.h3,{id:"example-7",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,o.jsx)(n.code,{children:"TodoItems"})," by ",(0,o.jsx)(n.code,{children:"subTasks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',children:"import { FilterableField, IDField, FilterableCursorConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@FilterableCursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Notice the use of ",(0,o.jsx)(n.code,{children:"@FilterableCursorConnection"})," instead of ",(0,o.jsx)(n.code,{children:"@CursorConnection"}),", by using the ",(0,o.jsx)(n.code,{children:"@FilterableCursorConnection"})," version ",(0,o.jsx)(n.code,{children:"nestjs-query"})," will allow filtering on the ",(0,o.jsx)(n.code,{children:"subTasks"})," relation."]}),"\n",(0,o.jsx)(n.p,{children:"The  module definition remains the same."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When querying for ",(0,o.jsx)(n.code,{children:"TodoItems"})," you can now also filter on ",(0,o.jsx)(n.code,{children:"subTasks"})," properties."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll find all ",(0,o.jsx)(n.code,{children:"todoItems"})," that have ",(0,o.jsx)(n.code,{children:"subTasks"})," that are completed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"{\n  todoItems(filter: { subTasks: { completed: { is: true } } }) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        title\n        description\n        completed\n        subTasks {\n          edges {\n            node {\n              title\n              description\n              completed\n            }\n          }\n        }\n      }\n      cursor\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"virtual-relations",children:"Virtual Relations"}),"\n",(0,o.jsxs)(n.p,{children:["You may run into a case where you have a ",(0,o.jsx)(n.code,{children:"virtual"})," relation that does not exist in the database. ",(0,o.jsx)(n.code,{children:"nestjs-query"}),"\nsupports this through the ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/concepts/services#relationqueryservice",children:"RelationQueryService"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,o.jsx)(n.p,{children:"The following options can be passed to all relation/connection decorators, to customize\nfunctionality."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"relationName"})," - The name of the relation to use when looking up the relation from the ",(0,o.jsx)(n.code,{children:"QueryService"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"nullable"})," - Set to ",(0,o.jsx)(n.code,{children:"true"})," if the relation is nullable."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"complexity"})," - Set to specify relation complexity. For more info see ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/graphql/complexity",children:"complexity docs"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"disableRead"})," -  Set to ",(0,o.jsx)(n.code,{children:"true"})," to disable read operations."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"update"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"enabled"})," -  Set to ",(0,o.jsx)(n.code,{children:"true"})," to enable update operations."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"description"})," -  The description of the update operation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"complexity"})," - Set to specify relation complexity. For more info see ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/graphql/complexity",children:"complexity docs"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"decorators=[]"})," - An array of custom ",(0,o.jsx)(n.code,{children:"PropertyDecorator"})," or ",(0,o.jsx)(n.code,{children:"MethodDecorators"})," to add to the endpoint."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"remove"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"enabled"})," -  Set to ",(0,o.jsx)(n.code,{children:"true"})," to enable remove operations."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"description"})," -  The description of the remove operation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"complexity"})," - Set to specify relation complexity. For more info see ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/graphql/complexity",children:"complexity docs"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"decorators=[]"})," - An array of custom ",(0,o.jsx)(n.code,{children:"PropertyDecorator"})," or ",(0,o.jsx)(n.code,{children:"MethodDecorators"})," to add to the endpoint."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"allowFiltering"})," - Set to ",(0,o.jsx)(n.code,{children:"true"})," to allow filtering on the relation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"guards=[]"})," - An array of ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/guards",children:"guards"})," to add to ",(0,o.jsx)(n.code,{children:"update"})," and ",(0,o.jsx)(n.code,{children:"remove"})," endpoints."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"interceptors=[]"})," - An array of ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/interceptors",children:"interceptors"})," to add to ",(0,o.jsx)(n.code,{children:"update"})," and ",(0,o.jsx)(n.code,{children:"remove"})," endpoints."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pipes=[]"})," - An array of ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/pipes",children:"pipes"})," to add to ",(0,o.jsx)(n.code,{children:"update"})," and ",(0,o.jsx)(n.code,{children:"remove"})," endpoints."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"filters=[]"})," - An array of ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/exception-filters",children:"filters"})," to add to ",(0,o.jsx)(n.code,{children:"update"})," and ",(0,o.jsx)(n.code,{children:"remove"})," endpoints."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"guards"}),", ",(0,o.jsx)(n.code,{children:"pipes"}),", ",(0,o.jsx)(n.code,{children:"interceptors"})," and ",(0,o.jsx)(n.code,{children:"filters"})," will not work by default with relation endpoints. See ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/graphql/tooling#execute-enhancers-at-the-field-resolver-level",children:"https://docs.nestjs.com/graphql/tooling#execute-enhancers-at-the-field-resolver-level"})]})}),"\n",(0,o.jsx)(n.h3,{id:"custom-relation-name",children:"Custom Relation Name"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes you may want to expose a relation that has a different name when persisted from the graphql property. To do this use the ",(0,o.jsx)(n.code,{children:"relationName"})," property."]}),"\n",(0,o.jsxs)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],children:[(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// expose todoItem as todoItemRelation in graphql\n@Relation('todoItemRelation', () => TodoItemDTO, { relationName: 'todoItem' })\n"})})}),(0,o.jsx)(r.A,{value:"cursor-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// expose subTasks as subTaskConnection in graphql\n@CursorConnection('subTaskConnection', () => SubTaskDTO, { relationName: 'subTasks' })\n"})})}),(0,o.jsx)(r.A,{value:"offset-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// expose subTasks as subTaskConnection in graphql\n@OffsetConnection('subTaskConnection', () => SubTaskDTO, { relationName: 'subTasks' })\n"})})}),(0,o.jsx)(r.A,{value:"unpaged-relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// expose subTasks as subTaskConnection in graphql\n@UnPagedRelation('subTasks', () => SubTaskDTO, { relationName: 'subTasks' })\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"graphql-lookahead",children:"GraphQL lookahead"}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsx)(n.p,{children:"This functionality only works for typeorm!"})}),"\n",(0,o.jsxs)(n.p,{children:["When you want to optimze your database queries you can set ",(0,o.jsx)(n.code,{children:"enableLookAhead"}),", this will join and select the relation\nwhen it's being fetched in the query."]}),"\n",(0,o.jsx)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"}],children:(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// enable enableLookAhead for the todoItem relation\n@Relation('todoItemRelation', () => TodoItemDTO, { enableLookAhead: true })\n"})})})}),"\n",(0,o.jsx)(n.h3,{id:"disable-reads",children:"Disable Reads"}),"\n",(0,o.jsxs)(n.p,{children:["To disable the ",(0,o.jsx)(n.code,{children:"read"})," ",(0,o.jsx)(n.code,{children:"queries"})," you can set the ",(0,o.jsx)(n.code,{children:"disableRead"})," option to ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,o.jsxs)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],children:[(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the todoItem relation\n@Relation('todoItem', () => TodoItemDTO, { disableRead: true })\n"})})}),(0,o.jsx)(r.A,{value:"cursor-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the connection\n@CursorConnection('subTasks', () => SubTaskDTO, { disableRead: true })\n"})})}),(0,o.jsx)(r.A,{value:"offset-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the relation\n@OffsetConnection('subTaskConnection', () => SubTaskDTO, { disableRead: true })\n"})})}),(0,o.jsx)(r.A,{value:"unpaged-relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the relation\n@UnPagedRelation('subTaskConnection', () => SubTaskDTO, { disableRead: true })\n"})})})]}),"\n",(0,o.jsxs)(n.h4,{id:"disable-filter-or-sorting-in-relations",children:["Disable ",(0,o.jsx)(n.code,{children:"filter"})," or ",(0,o.jsx)(n.code,{children:"sorting"})," in relations"]}),"\n",(0,o.jsxs)(n.p,{children:["To disable the ",(0,o.jsx)(n.code,{children:"filter"})," or ",(0,o.jsx)(n.code,{children:"sorting"})," of relations you can set the ",(0,o.jsx)(n.code,{children:"disableFilter"})," or/and ",(0,o.jsx)(n.code,{children:"disableSort"})," option to ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,o.jsxs)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],children:[(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsxs)(n.p,{children:["This is not available in ",(0,o.jsx)(n.code,{children:"relation"})," as it will only fetch one record."]})}),(0,o.jsx)(r.A,{value:"cursor-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the connection\n@CursorConnection('subTasks', () => SubTaskDTO, { disableFilter: true, disableSort: true })\n"})})}),(0,o.jsx)(r.A,{value:"offset-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the relation\n@OffsetConnection('subTaskConnection', () => SubTaskDTO, { disableFilter: true, disableSort: true })\n"})})}),(0,o.jsx)(r.A,{value:"unpaged-relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable reading the relation\n@UnPagedRelation('subTaskConnection', () => SubTaskDTO, { disableFilter: true, disableSort: true })\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"enable-updates",children:"Enable Updates"}),"\n",(0,o.jsxs)(n.p,{children:["To enable the ",(0,o.jsx)(n.code,{children:"update"})," ",(0,o.jsx)(n.code,{children:"mutations"})," you can set the ",(0,o.jsx)(n.code,{children:"update.enabled"})," option to ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,o.jsxs)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],children:[(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable updates to the relation\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\n"})})}),(0,o.jsx)(r.A,{value:"cursor-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable updating subTasks\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"})})}),(0,o.jsx)(r.A,{value:"offset-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable updating subTasks\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"})})}),(0,o.jsx)(r.A,{value:"unpaged-relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable updating subTasks\n@UnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"enable-removes",children:"Enable Removes"}),"\n",(0,o.jsxs)(n.p,{children:["To enable the ",(0,o.jsx)(n.code,{children:"remove"})," ",(0,o.jsx)(n.code,{children:"mutations"})," you can set the ",(0,o.jsx)(n.code,{children:"remove.enabled"})," option to ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,o.jsxs)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],children:[(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable removing the relation\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\n"})})}),(0,o.jsx)(r.A,{value:"cursor-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable removing subTasks from the connection\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"})})}),(0,o.jsx)(r.A,{value:"offset-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable removing subTasks from the connection\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"})})}),(0,o.jsx)(r.A,{value:"unpaged-relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// disable removing subTasks from the relations\n@UnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"guards-pipes-and-filters",children:"Guards, Pipes and Filters"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE"})," ",(0,o.jsx)(n.code,{children:"guards"}),", ",(0,o.jsx)(n.code,{children:"pipes"}),", ",(0,o.jsx)(n.code,{children:"interceptors"})," and ",(0,o.jsx)(n.code,{children:"filters"})," will not work by default with ",(0,o.jsx)(n.code,{children:"read"})," endpoints. See ",(0,o.jsx)(n.a,{href:"https://github.com/nestjs/graphql/issues/295",children:"https://github.com/nestjs/graphql/issues/295"})]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we'll just demonstrate using a ",(0,o.jsx)(n.code,{children:"guard"})," but the same pattern applies for ",(0,o.jsx)(n.code,{children:"pipes"}),", ",(0,o.jsx)(n.code,{children:"filters"})," and\n",(0,o.jsx)(n.code,{children:"interceptors"})]}),"\n",(0,o.jsxs)(n.p,{children:["To set up a ",(0,o.jsx)(n.a,{href:"https://docs.nestjs.com/guards",children:"guard"})," for endpoint you can use the ",(0,o.jsx)(n.code,{children:"guards"})," option."]}),"\n",(0,o.jsx)(n.p,{children:"Assume we have the following auth guard that checks for a certain header and value."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="auth.guard.ts"',children:"import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AUTH_HEADER_NAME } from './constants';\nimport { config } from './config';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const ctx = GqlExecutionContext.create(context);\n    const req = ctx.getContext().request;\n    this.logger.log(`Req = ${req.headers}`);\n    return req.headers[AUTH_HEADER_NAME] === config.auth.header;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"We can then add it to our relations"}),"\n",(0,o.jsxs)(l.A,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],children:[(0,o.jsx)(r.A,{value:"relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Add the AuthGuard using the guards option\n@Relation('todoItem', () => TodoItemDTO, { guards: [AuthGuard] })\n"})})}),(0,o.jsx)(r.A,{value:"cursor-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Add the AuthGuard using the guards option\n@CursorConnection('subTasks', () => SubTaskDTO, { guards: [AuthGuard] })\n"})})}),(0,o.jsx)(r.A,{value:"offset-connection",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Add the AuthGuard using the guards option\n@OffsetConnection('subTasks', () => SubTaskDTO, { guards: [AuthGuard] })\n"})})}),(0,o.jsx)(r.A,{value:"unpaged-relation",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Add the AuthGuard using the guards option\n@UnPagedRelation('subTasks', () => SubTaskDTO, { guards: [AuthGuard] })\n"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["Now any requests that go to the ",(0,o.jsx)(n.code,{children:"update"})," or ",(0,o.jsx)(n.code,{children:"remove"})," endpoints will require the guard."]}),"\n",(0,o.jsx)(n.h3,{id:"relation-mixin",children:"Relation Mixin"}),"\n",(0,o.jsxs)(n.p,{children:["If you are using the ",(0,o.jsx)(n.a,{href:"/nestjs-query/docs/graphql/resolvers#individual-resolvers",children:"resolvers individually"})," you can use the following mixins to\nadd relations functionality."]}),"\n",(0,o.jsx)(n.h4,{id:"relatable",children:"Relatable"}),"\n",(0,o.jsxs)(n.p,{children:["When using The ",(0,o.jsx)(n.code,{children:"Relatable"})," mixin adds all relations functionality to a resolver."]}),"\n",(0,o.jsxs)(n.p,{children:["In this example we expose on read endpoints for todo items with the relations defined on the ",(0,o.jsx)(n.code,{children:"TodoItemDTO"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="todo-item/todo-item.resolver.ts" {12-14}',children:"import { ReadResolver, Relatable } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { SubTaskDTO } from '../sub-task/dto/sub-task.dto';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\nconst guards = [AuthGuard];\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends Relatable(TodoItemDTO)(ReadResolver(TodoItemDTO)) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(6540);const s={},l=o.createContext(s);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);