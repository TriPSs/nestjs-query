"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[4195],{1347:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var r=n(4164);const o={tabItem:"tabItem_Ymn6"};var a=n(4848);function i(e){var t=e.children,n=e.hidden,i=e.className;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:n,children:t})}},3384:(e,t,n)=>{n.d(t,{A:()=>j});var r=n(6540),o=n(4164),a=n(5236),i=n(6347),l=n(8385),s=n(5793),d=n(7422),u=n(2152);function c(e){var t,n;return null!=(t=null==(n=r.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,r.isValidElement)(e)&&((t=e.props)&&"object"==typeof t&&"value"in t))return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}function p(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:function(e){return c(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}(n);return function(e){var t=(0,d.XI)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function b(e){var t=e.queryString,n=void 0!==t&&t,o=e.groupId,a=(0,i.W6)(),l=function(e){var t=e.queryString,n=void 0!==t&&t,r=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:n,groupId:o});return[(0,s.aZ)(l),(0,r.useCallback)((function(e){if(l){var t=new URLSearchParams(a.location.search);t.set(l,e),a.replace(Object.assign({},a.location,{search:t.toString()}))}}),[l,a])]}function g(e){var t,n,o,a,i=e.defaultValue,s=e.queryString,d=void 0!==s&&s,c=e.groupId,g=p(e),h=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var o=null!=(t=r.find((function(e){return e.default})))?t:r[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:i,tabValues:g})})),y=h[0],f=h[1],v=b({queryString:d,groupId:c}),T=v[0],x=v[1],j=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),n=(0,u.Dv)(t),o=n[0],a=n[1],[o,(0,r.useCallback)((function(e){t&&a.set(e)}),[t,a])]),F=j[0],I=j[1],D=function(){var e=null!=T?T:F;return m({value:e,tabValues:g})?e:null}();return(0,l.A)((function(){D&&f(D)}),[D]),{selectedValue:y,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:g}))throw new Error("Can't select invalid tab value="+e);f(e),x(e),I(e)}),[x,I,g]),tabValues:g}}var h=n(195);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function v(e){var t=e.className,n=e.block,r=e.selectedValue,i=e.selectValue,l=e.tabValues,s=[],d=(0,a.a_)().blockElementScrollPositionUntilNextRender,u=function(e){var t=e.currentTarget,n=s.indexOf(t),o=l[n].value;o!==r&&(d(t),i(o))},c=function(e){var t,n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var r,o=s.indexOf(e.currentTarget)+1;n=null!=(r=s[o])?r:s[0];break;case"ArrowLeft":var a,i=s.indexOf(e.currentTarget)-1;n=null!=(a=s[i])?a:s[s.length-1]}null==(t=n)||t.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:l.map((function(e){var t=e.value,n=e.label,a=e.attributes;return(0,f.jsx)("li",Object.assign({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:function(e){return s.push(e)},onKeyDown:c,onClick:u},a,{className:(0,o.A)("tabs__item",y.tabItem,null==a?void 0:a.className,{"tabs__item--active":r===t}),children:null!=n?n:t}),t)}))})}function T(e){var t=e.lazy,n=e.children,a=e.selectedValue,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var l=i.find((function(e){return e.props.value===a}));return l?(0,r.cloneElement)(l,{className:(0,o.A)("margin-top--md",l.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})}))})}function x(e){var t=g(e);return(0,f.jsxs)("div",{className:(0,o.A)("tabs-container",y.tabList),children:[(0,f.jsx)(v,Object.assign({},t,e)),(0,f.jsx)(T,Object.assign({},t,e))]})}function j(e){var t=(0,h.A)();return(0,f.jsx)(x,Object.assign({},e,{children:c(e.children)}),String(t))}},3821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var r=n(4848),o=n(8453),a=n(3384),i=n(1347);const l={title:"Relations"},s=void 0,d={id:"persistence/typegoose/relations",title:"Relations",description:"Relations work a little differently in typegoose when compared to other relational ORMs such as sequelize or",source:"@site/docs/persistence/typegoose/relations.mdx",sourceDirName:"persistence/typegoose",slug:"/persistence/typegoose/relations",permalink:"/nestjs-query/docs/persistence/typegoose/relations",draft:!1,unlisted:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/persistence/typegoose/relations.mdx",tags:[],version:"current",frontMatter:{title:"Relations"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/nestjs-query/docs/persistence/typegoose/getting-started"},next:{title:"Custom Service",permalink:"/nestjs-query/docs/persistence/typegoose/custom-service"}},u={},c=[{value:"One to Many/Many To One Example",id:"one-to-manymany-to-one-example",level:2},{value:"Many To Many Example",id:"many-to-many-example",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Relations work a little differently in ",(0,r.jsx)(t.code,{children:"typegoose"})," when compared to other relational ORMs such as ",(0,r.jsx)(t.code,{children:"sequelize"})," or\n",(0,r.jsx)(t.code,{children:"typeorm"}),". You can read more about relations (references) in ",(0,r.jsx)(t.code,{children:"typegoose"})," [here](",(0,r.jsx)(t.a,{href:"https://mongoosejs.com/docs/populate",children:"https://mongoosejs.com/docs/populate"}),"\n.html)"]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"There are multiple ways to set of references in Typegoose. These are intended as a starting point."})}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"Filtering on references is not supported by Typegoose."})}),"\n",(0,r.jsx)(t.h2,{id:"one-to-manymany-to-one-example",children:"One to Many/Many To One Example"}),"\n",(0,r.jsx)(t.p,{children:"To set up a one to many/many to one relationship in Typegoose, you will store a reference in your document."}),"\n",(0,r.jsxs)(t.p,{children:["For example, lets add sub tasks to our todo items by storing a ",(0,r.jsx)(t.code,{children:"todoItem"})," ref on our ",(0,r.jsx)(t.code,{children:"subTask"})," and an array of sub-tasks on our ",(0,r.jsx)(t.code,{children:"todoItem"})," entity."]}),"\n",(0,r.jsxs)(a.A,{defaultValue:"todoitem",values:[{label:"TodoItemEntity",value:"todoitem"},{label:"SubTaskEntity",value:"subtask"}],children:[(0,r.jsx)(i.A,{value:"todoitem",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.entity.ts" {24-25}',children:"import { Prop, modelOptions } from '@typegoose/typegoose';\nimport { Base } from '@typegoose/typegoose/lib/defaultClasses';\n\n@modelOptions({ schemaOptions: { timestamps: true } })\nexport class TodoItemEntity extends Base {\n  @Prop({ required: true })\n  title!: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ required: true })\n  completed!: boolean;\n\n  @Prop({ default: Date.now })\n  createdAt!: Date;\n\n  @Prop({ default: Date.now })\n  updatedAt!: Date;\n\n  @Prop({ default: 0 })\n  priority!: number;\n\n  @Prop({ ref: () => SubTaskEntity })\n  subTasks: Ref<SubTaskEntity>[];\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n}\n"})})}),(0,r.jsx)(i.A,{value:"subtask",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="sub-task/sub-task.entity.ts" {15-16}',children:"import { Prop, modelOptions, Ref } from '@typegoose/typegoose';\nimport { Base } from '@typegoose/typegoose/lib/defaultClasses';\n\n@modelOptions({ schemaOptions: { timestamps: true } })\nexport class SubTaskEntity extends Base {\n  @Prop({ required: true })\n  title!: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ required: true })\n  completed!: boolean;\n\n  @Prop({ ref: () => TodoItemEntity, required: true })\n  todoItem!: Ref<TodoItemEntity>;\n\n  @Prop()\n  createdAt!: Date;\n\n  @Prop()\n  updatedAt!: Date;\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Now that we have the relationships defined, we can add the ",(0,r.jsx)(t.code,{children:"@Relation"})," and ",(0,r.jsx)(t.code,{children:"@Connection"})," to our DTOs"]}),"\n",(0,r.jsxs)(a.A,{defaultValue:"todoitem",values:[{label:"TodoItemDTO",value:"todoitem"},{label:"SubTaskDTO",value:"subtask"}],children:[(0,r.jsx)(i.A,{value:"todoitem",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts"',children:"import { FilterableField, IDField, KeySet, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../../sub-task/dto/sub-task.dto';\n\n@ObjectType('TodoItem')\n@KeySet(['id'])\n// disable the remove because mongoose does not support removing a virtual\n@Connection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @Field()\n  age!: number;\n\n  @FilterableField()\n  priority!: number;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"})})}),(0,r.jsx)(i.A,{value:"subtask",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts"',children:"import { FilterableField, IDField, KeySet, Relation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../../todo-item/dto/todo-item.dto';\n\n@ObjectType('SubTask')\n@KeySet(['id'])\n// disable the remove because a sub task cannot exist without a todoitem\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\nexport class SubTaskDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"many-to-many-example",children:"Many To Many Example"}),"\n",(0,r.jsxs)(t.p,{children:["In this example, we'll add ",(0,r.jsx)(t.code,{children:"tags"})," to ",(0,r.jsx)(t.code,{children:"todoItems"})," by storing an array of ",(0,r.jsx)(t.code,{children:"tag"})," references on the ",(0,r.jsx)(t.code,{children:"todoItems"}),"."]}),"\n",(0,r.jsxs)(a.A,{defaultValue:"todoitem",values:[{label:"TodoItemEntity",value:"todoitem"},{label:"TagEntity",value:"tag"}],children:[(0,r.jsx)(i.A,{value:"todoitem",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.entity.ts" {21-23}',children:"import { Prop, modelOption, Ref } from '@typegoose/typegoose';\nimport { Base } from '@typegoose/typegoose/lib/defaultClasses';\n\n@modelOptions({ schemaOptions: { timestamps: true } })\nexport class TodoItemEntity extends Base {\n  @Prop({ required: true })\n  title!: string;\n\n  @Prop()\n  description?: string;\n\n  @Prop({ required: true })\n  completed!: boolean;\n\n  @Prop({ default: Date.now })\n  createdAt!: Date;\n\n  @Prop({ default: Date.now })\n  updatedAt!: Date;\n\n  @Prop({ ref: () => TagEntity })\n  tags!: Ref<TagEntity>[];\n\n  @Prop({ default: 0 })\n  priority!: number;\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n\n  public get id(): string {\n    // eslint-disable-next-line no-underscore-dangle\n    return this._id.toHexString();\n  }\n}\n\n"})})}),(0,r.jsx)(i.A,{value:"tag",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="tag/tag.entity.ts" {33-38}',children:"import { Base } from '@typegoose/typegoose/lib/defaultClasses';\nimport { Prop, modelOptions, Ref } from '@typegoose/typegoose';\nimport { Types } from 'mongoose';\nimport { TodoItemEntity } from '../todo-item/todo-item.entity';\n\n@modelOptions({\n  schemaOptions: {\n    timestamps: true,\n    collection: 'tags',\n    toObject: { virtuals: true },\n  },\n})\nexport class TagEntity implements Base {\n  _id!: Types.ObjectId;\n\n  id!: string;\n\n  @Prop({ required: true })\n  name!: string;\n\n  @Prop()\n  createdAt!: Date;\n\n  @Prop()\n  updatedAt!: Date;\n\n  @Prop()\n  createdBy?: string;\n\n  @Prop()\n  updatedBy?: string;\n\n  @Prop({\n    ref: 'TodoItemEntity',\n    localField: '_id',\n    foreignField: 'tags',\n  })\n  todoItems?: Ref<TodoItemEntity>[];\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Now that we have the relationship defined, we can add the ",(0,r.jsx)(t.code,{children:"@Connection"})," to our DTOS"]}),"\n",(0,r.jsxs)(a.A,{defaultValue:"todoitem",values:[{label:"TodoItemDTO",value:"todoitem"},{label:"TagDTO",value:"tag"}],children:[(0,r.jsx)(i.A,{value:"todoitem",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts"',children:"import { FilterableField, IDField, KeySet, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime, Field } from '@nestjs/graphql';\nimport { TagDTO } from '../../tag/dto/tag.dto';\n\n@ObjectType('TodoItem')\n@KeySet(['id'])\n@Connection('tags', () => TagDTO)\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField({ nullable: true })\n  description?: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @Field()\n  age!: number;\n\n  @FilterableField()\n  priority!: number;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"})})}),(0,r.jsx)(i.A,{value:"tag",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="tag/tag.dto.ts"',children:"import { FilterableField, IDField, KeySet, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../../todo-item/dto/todo-item.dto';\n\n@ObjectType('Tag')\n@KeySet(['id'])\n// disable update and remove since it is a virtual in the entity\n@Connection('todoItems', () => TodoItemDTO)\nexport class TagDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  name!: string;\n\n  @FilterableField(() => GraphQLISODateTime)\n  createdAt!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updatedAt!: Date;\n\n  @FilterableField({ nullable: true })\n  createdBy?: string;\n\n  @FilterableField({ nullable: true })\n  updatedBy?: string;\n}\n"})})})]})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(6540);const o={},a=r.createContext(o);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);