"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[5133],{9753:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>m,contentTitle:()=>i,default:()=>a,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=t(4848),s=t(8453);const r={title:"Custom Service"},i=void 0,c={id:"persistence/mongoose/custom-service",title:"Custom Service",description:"To create a custom query service to add your own methods to you can extend the MongooseQueryService.",source:"@site/docs/persistence/mongoose/custom-service.md",sourceDirName:"persistence/mongoose",slug:"/persistence/mongoose/custom-service",permalink:"/nestjs-query/docs/persistence/mongoose/custom-service",draft:!1,unlisted:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/persistence/mongoose/custom-service.md",tags:[],version:"current",frontMatter:{title:"Custom Service"},sidebar:"docs",previous:{title:"Relations",permalink:"/nestjs-query/docs/persistence/mongoose/relations"},next:{title:"Serialization",permalink:"/nestjs-query/docs/persistence/mongoose/serialization"}},m={},d=[];function u(e){const o={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.p,{children:["To create a custom query service to add your own methods to you can extend the ",(0,n.jsx)(o.code,{children:"MongooseQueryService"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",metastring:'title="todo-item.service.ts"',children:"import { Model } from 'mongoose'\nimport { QueryService } from '@ptc-org/nestjs-query-core';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MongooseQueryService } from '@ptc-org/nestjs-query-mongoose';\nimport { TodoItemEntity } from './entity/todo-item.entity';\n\n@QueryService(TodoItemEntity)\nexport class TodoItemService extends MongooseQueryService<TodoItemEntity> {\n  constructor(@InjectModel(TodoItemEntity.name) model:  Model<TodoItemEntity>) {\n    super(model);\n  }\n\n  async markAllAsCompleted(): Promise<number> {\n    const entities = await this.query({ filter: { completed: { is: true } } });\n\n    const { updatedCount } = await this.updateMany(\n      { completed: true }, // update\n      { id: { in: entities.map((e) => e.id) } }, // filter\n    );\n    // do some other business logic\n    return updatedCount;\n  }\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["To use the custom service in the auto-generated resolver you can specify the ",(0,n.jsx)(o.code,{children:"ServiceClass"})," option."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",metastring:'title="todo-item.module.ts" {12,16}',children:"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryMongooseModule } from '@ptc-org/nestjs-query-mongoose';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemService } from './todo-item.service';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [\n        NestjsQueryMongooseModule.forFeature([\n          { document: TodoItemEntity, name: TodoItemEntity.name, schema: TodoItemEntitySchema },\n        ]),\n      ],\n      services: [TodoItemService],\n      resolvers: [\n        {\n          DTOClass: TodoItemDTO,\n          ServiceClass: TodoItemService,\n        },\n      ],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n\n"})})]})}function a(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>c});var n=t(6540);const s={},r=n.createContext(s);function i(e){const o=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:o},e.children)}}}]);