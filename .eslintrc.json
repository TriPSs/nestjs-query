{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx", "simple-import-sort"],
  "extends": [
    "airbnb-typescript/base",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:jest/recommended",
    "plugin:jest/style",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "import/no-unresolved": "off"
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],
        "semi": ["warn", "never"]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nx/typescript"],
      "rules": {
        // airbnb default is 1
        "max-classes-per-file": ["error", 5],
        // never allow default export
        "import/prefer-default-export": "off",
        // never allow default export
        "import/no-default-export": "error",
        // added by airbnb not-practical for entity-relation definitions
        "import/no-cycle": "off",
        // needed so we can use class scoped generics in methods.
        "class-methods-use-this": "off",
        // airbnb default this doesn't work when using parameter decorators.
        "@typescript-eslint/no-useless-constructor": "off",
        // override airbnb to allow class interface merging
        "@typescript-eslint/no-redeclare": [
          "error",
          {
            "ignoreDeclarationMerge": true
          }
        ],
        "@typescript-eslint/no-unsafe-assignment": "off",
        "simple-import-sort/imports": [
          "warn",
          {
            "groups": [
              // Packages. `react` related packages come first.
              ["^react", "^@?\\w"],
              // "type" imports.
              ["^.*\\u0000$"],
              // Absolute imports and other imports such as Vue-style `@/foo`.
              // Anything not matched in another group.
              ["^"],
              // Relative imports.
              // Anything that starts with a dot.
              ["^\\."]
            ]
          }
        ],
        "simple-import-sort/exports": "warn",
        "@typescript-eslint/no-extra-semi": "error",
        "no-extra-semi": "off"
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"],
      "rules": {
        "@typescript-eslint/no-extra-semi": "error",
        "no-extra-semi": "off"
      }
    },
    {
      "files": ["*.spec.ts", "*/__fixtures__/*.ts"],
      "extends": ["plugin:@nx/typescript"],
      "rules": {
        "max-classes-per-file": ["off"],
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "import/no-extraneous-dependencies": "off",
        "jest/expect-expect": "off",
        "@nx/enforce-module-boundaries": ["off"],
        "@typescript-eslint/no-extra-semi": "error",
        "no-extra-semi": "off"
      }
    }
  ]
}
