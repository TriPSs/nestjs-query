# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface TodoItemDTO {
  id: ID!
  title: String!
  completed: Boolean!
  documentType: String!
}

type SubTask {
  id: ID!
  title: String!
  description: String
  completed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String
  updatedBy: String
  todoItem: TodoItemDTO!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TodoAppointment implements TodoItemDTO {
  id: ID!
  title: String!
  completed: Boolean!
  documentType: String!
  dateTime: DateTime!
  participants: [String!]!
  subTasks(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: SubTaskFilter! = {}

    """Specify to sort results."""
    sorting: [SubTaskSort!]! = []
  ): TodoAppointmentSubTasksConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input SubTaskFilter {
  and: [SubTaskFilter!]
  or: [SubTaskFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  completed: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input SubTaskSort {
  field: SubTaskSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SubTaskSortFields {
  id
  title
  description
  completed
  createdAt
  updatedAt
  createdBy
  updatedBy
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type TodoTask implements TodoItemDTO {
  id: ID!
  title: String!
  completed: Boolean!
  documentType: String!
  priority: Float!
  subTasks(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: SubTaskFilter! = {}

    """Specify to sort results."""
    sorting: [SubTaskSort!]! = []
  ): TodoTaskSubTasksConnection!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TodoItemDTODeleteResponse {
  id: ID
  title: String
  completed: Boolean
  documentType: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type TodoItemDTOEdge {
  """The node containing the TodoItemDTO"""
  node: TodoItemDTO!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type TodoItemDTOConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TodoItemDTOEdge!]!
}

type TodoTaskDeleteResponse {
  id: ID
  title: String
  completed: Boolean
  documentType: String
  priority: Float
}

type TodoTaskEdge {
  """The node containing the TodoTask"""
  node: TodoTask!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type TodoTaskConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TodoTaskEdge!]!
}

type SubTaskEdge {
  """The node containing the SubTask"""
  node: SubTask!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type TodoTaskSubTasksConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SubTaskEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TodoAppointmentDeleteResponse {
  id: ID
  title: String
  completed: Boolean
  documentType: String
  dateTime: DateTime
  participants: [String!]
}

type TodoAppointmentEdge {
  """The node containing the TodoAppointment"""
  node: TodoAppointment!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type TodoAppointmentConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TodoAppointmentEdge!]!
}

type TodoAppointmentSubTasksConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SubTaskEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SubTaskDeleteResponse {
  id: ID
  title: String
  description: String
  completed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: String
  updatedBy: String
}

type SubTaskConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SubTaskEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SubTaskAggregateGroupBy {
  id: ID
  title: String
  description: String
  completed: Boolean
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  createdBy: String
  updatedBy: String
}

"""Group by"""
enum GroupBy {
  DAY
  WEEK
  MONTH
  YEAR
}

type SubTaskCountAggregate {
  id: Int
  title: Int
  description: Int
  completed: Int
  createdAt: Int
  updatedAt: Int
  createdBy: Int
  updatedBy: Int
}

type SubTaskMinAggregate {
  id: ID
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: String
  updatedBy: String
}

type SubTaskMaxAggregate {
  id: ID
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: String
  updatedBy: String
}

type SubTaskAggregateResponse {
  groupBy: SubTaskAggregateGroupBy
  count: SubTaskCountAggregate
  min: SubTaskMinAggregate
  max: SubTaskMaxAggregate
}

type Query {
  subTaskAggregate(
    """Filter to find records to aggregate on"""
    filter: SubTaskAggregateFilter
  ): [SubTaskAggregateResponse!]!
  subTask(
    """The id of the record to find."""
    id: ID!
  ): SubTask!
  subTasks(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: SubTaskFilter! = {}

    """Specify to sort results."""
    sorting: [SubTaskSort!]! = []
  ): SubTaskConnection!
  todoItem(
    """The id of the record to find."""
    id: ID!
  ): TodoItemDTO!
  todoItems(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TodoItemDTOFilter! = {}

    """Specify to sort results."""
    sorting: [TodoItemDTOSort!]! = []
  ): TodoItemDTOConnection!
  todoTask(
    """The id of the record to find."""
    id: ID!
  ): TodoTask!
  todoTasks(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TodoTaskFilter! = {}

    """Specify to sort results."""
    sorting: [TodoTaskSort!]! = []
  ): TodoTaskConnection!
  todoAppointment(
    """The id of the record to find."""
    id: ID!
  ): TodoAppointment!
  todoAppointments(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TodoAppointmentFilter! = {}

    """Specify to sort results."""
    sorting: [TodoAppointmentSort!]! = []
  ): TodoAppointmentConnection!
}

input SubTaskAggregateFilter {
  and: [SubTaskAggregateFilter!]
  or: [SubTaskAggregateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  completed: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input TodoItemDTOFilter {
  and: [TodoItemDTOFilter!]
  or: [TodoItemDTOFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
}

input TodoItemDTOSort {
  field: TodoItemDTOSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TodoItemDTOSortFields {
  id
  title
  completed
  documentType
}

input TodoTaskFilter {
  and: [TodoTaskFilter!]
  or: [TodoTaskFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
  priority: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TodoTaskSort {
  field: TodoTaskSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TodoTaskSortFields {
  id
  title
  completed
  documentType
  priority
}

input TodoAppointmentFilter {
  and: [TodoAppointmentFilter!]
  or: [TodoAppointmentFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
  dateTime: DateFieldComparison
  participants: StringFieldComparison
}

input TodoAppointmentSort {
  field: TodoAppointmentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TodoAppointmentSortFields {
  id
  title
  completed
  documentType
  dateTime
  participants
}

type Mutation {
  setTodoItemOnSubTask(input: SetTodoItemOnSubTaskInput!): SubTask!
  createOneSubTask(input: CreateOneSubTaskInput!): SubTask!
  createManySubTasks(input: CreateManySubTasksInput!): [SubTask!]!
  updateOneSubTask(input: UpdateOneSubTaskInput!): SubTask!
  updateManySubTasks(input: UpdateManySubTasksInput!): UpdateManyResponse!
  deleteOneSubTask(input: DeleteOneSubTaskInput!): SubTaskDeleteResponse!
  deleteManySubTasks(input: DeleteManySubTasksInput!): DeleteManyResponse!
  createOneTodoItemDTO(input: CreateOneTodoItemDTOInput!): TodoItemDTO!
  createManyTodoItemDTOS(input: CreateManyTodoItemDTOSInput!): [TodoItemDTO!]!
  updateOneTodoItemDTO(input: UpdateOneTodoItemDTOInput!): TodoItemDTO!
  updateManyTodoItemDTOS(input: UpdateManyTodoItemDTOSInput!): UpdateManyResponse!
  deleteOneTodoItemDTO(input: DeleteOneTodoItemDTOInput!): TodoItemDTODeleteResponse!
  deleteManyTodoItemDTOS(input: DeleteManyTodoItemDTOSInput!): DeleteManyResponse!
  createOneTodoTask(input: CreateOneTodoTaskInput!): TodoTask!
  createManyTodoTasks(input: CreateManyTodoTasksInput!): [TodoTask!]!
  updateOneTodoTask(input: UpdateOneTodoTaskInput!): TodoTask!
  updateManyTodoTasks(input: UpdateManyTodoTasksInput!): UpdateManyResponse!
  deleteOneTodoTask(input: DeleteOneTodoTaskInput!): TodoTaskDeleteResponse!
  deleteManyTodoTasks(input: DeleteManyTodoTasksInput!): DeleteManyResponse!
  createOneTodoAppointment(input: CreateOneTodoAppointmentInput!): TodoAppointment!
  createManyTodoAppointments(input: CreateManyTodoAppointmentsInput!): [TodoAppointment!]!
  updateOneTodoAppointment(input: UpdateOneTodoAppointmentInput!): TodoAppointment!
  updateManyTodoAppointments(input: UpdateManyTodoAppointmentsInput!): UpdateManyResponse!
  deleteOneTodoAppointment(input: DeleteOneTodoAppointmentInput!): TodoAppointmentDeleteResponse!
  deleteManyTodoAppointments(input: DeleteManyTodoAppointmentsInput!): DeleteManyResponse!
}

input SetTodoItemOnSubTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneSubTaskInput {
  """The record to create"""
  subTask: SubTaskInput!
}

input SubTaskInput {
  title: String!
  description: String
  completed: Boolean!
  todoItem: ID!
}

input CreateManySubTasksInput {
  """Array of records to create"""
  subTasks: [SubTaskInput!]!
}

input UpdateOneSubTaskInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: SubTaskUpdate!
}

input SubTaskUpdate {
  title: String!
  description: String
  completed: Boolean
  todoItem: String
}

input UpdateManySubTasksInput {
  """Filter used to find fields to update"""
  filter: SubTaskUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: SubTaskUpdate!
}

input SubTaskUpdateFilter {
  and: [SubTaskUpdateFilter!]
  or: [SubTaskUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  completed: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input DeleteOneSubTaskInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManySubTasksInput {
  """Filter to find records to delete"""
  filter: SubTaskDeleteFilter!
}

input SubTaskDeleteFilter {
  and: [SubTaskDeleteFilter!]
  or: [SubTaskDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  completed: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
}

input CreateOneTodoItemDTOInput {
  """The record to create"""
  todoItemDTO: CreateTodoItemDTO!
}

input CreateTodoItemDTO {
  id: ID!
  title: String!
  completed: Boolean!
  documentType: String!
}

input CreateManyTodoItemDTOSInput {
  """Array of records to create"""
  todoItemDTOS: [CreateTodoItemDTO!]!
}

input UpdateOneTodoItemDTOInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTodoItemDTO!
}

input UpdateTodoItemDTO {
  id: ID
  title: String
  completed: Boolean
  documentType: String
}

input UpdateManyTodoItemDTOSInput {
  """Filter used to find fields to update"""
  filter: TodoItemDTOUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTodoItemDTO!
}

input TodoItemDTOUpdateFilter {
  and: [TodoItemDTOUpdateFilter!]
  or: [TodoItemDTOUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
}

input DeleteOneTodoItemDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTodoItemDTOSInput {
  """Filter to find records to delete"""
  filter: TodoItemDTODeleteFilter!
}

input TodoItemDTODeleteFilter {
  and: [TodoItemDTODeleteFilter!]
  or: [TodoItemDTODeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
}

input CreateOneTodoTaskInput {
  """The record to create"""
  todoTask: CreateTodoTaskInput!
}

input CreateTodoTaskInput {
  title: String!
  completed: Boolean!
  priority: Int!
}

input CreateManyTodoTasksInput {
  """Array of records to create"""
  todoTasks: [CreateTodoTaskInput!]!
}

input UpdateOneTodoTaskInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTodoTask!
}

input UpdateTodoTask {
  id: ID
  title: String
  completed: Boolean
  documentType: String
  priority: Float
}

input UpdateManyTodoTasksInput {
  """Filter used to find fields to update"""
  filter: TodoTaskUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTodoTask!
}

input TodoTaskUpdateFilter {
  and: [TodoTaskUpdateFilter!]
  or: [TodoTaskUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
  priority: NumberFieldComparison
}

input DeleteOneTodoTaskInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTodoTasksInput {
  """Filter to find records to delete"""
  filter: TodoTaskDeleteFilter!
}

input TodoTaskDeleteFilter {
  and: [TodoTaskDeleteFilter!]
  or: [TodoTaskDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
  priority: NumberFieldComparison
}

input CreateOneTodoAppointmentInput {
  """The record to create"""
  todoAppointment: CreateTodoAppointmentInput!
}

input CreateTodoAppointmentInput {
  title: String!
  completed: Boolean!
  dateTime: DateTime!
  participants: [String!]!
}

input CreateManyTodoAppointmentsInput {
  """Array of records to create"""
  todoAppointments: [CreateTodoAppointmentInput!]!
}

input UpdateOneTodoAppointmentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTodoAppointment!
}

input UpdateTodoAppointment {
  id: ID
  title: String
  completed: Boolean
  documentType: String
  dateTime: DateTime
  participants: [String!]
}

input UpdateManyTodoAppointmentsInput {
  """Filter used to find fields to update"""
  filter: TodoAppointmentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTodoAppointment!
}

input TodoAppointmentUpdateFilter {
  and: [TodoAppointmentUpdateFilter!]
  or: [TodoAppointmentUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
  dateTime: DateFieldComparison
  participants: StringFieldComparison
}

input DeleteOneTodoAppointmentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTodoAppointmentsInput {
  """Filter to find records to delete"""
  filter: TodoAppointmentDeleteFilter!
}

input TodoAppointmentDeleteFilter {
  and: [TodoAppointmentDeleteFilter!]
  or: [TodoAppointmentDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
  documentType: StringFieldComparison
  dateTime: DateFieldComparison
  participants: StringFieldComparison
}